[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/recurly/ApiError.js",
    "content": "class ApiError extends Error {\n  constructor (message, type, params) {\n    super(message)\n    this.name = 'RecurlyApiError'\n    this.type = type\n    this.params = params || []\n  }\n}\n\nmodule.exports = ApiError\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/ApiError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "ApiError",
    "memberof": "lib/recurly/ApiError.js",
    "static": true,
    "longname": "lib/recurly/ApiError.js~ApiError",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/ApiError.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "Error"
    ],
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/recurly/ApiError.js~ApiError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/ApiError.js~ApiError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "name",
    "memberof": "lib/recurly/ApiError.js~ApiError",
    "static": false,
    "longname": "lib/recurly/ApiError.js~ApiError#name",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "type",
    "memberof": "lib/recurly/ApiError.js~ApiError",
    "static": false,
    "longname": "lib/recurly/ApiError.js~ApiError#type",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "params",
    "memberof": "lib/recurly/ApiError.js~ApiError",
    "static": false,
    "longname": "lib/recurly/ApiError.js~ApiError#params",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "lib/recurly/BaseClient.js",
    "content": "'use strict'\n\nconst https = require('https')\n\nconst pkg = require('../../package')\n\nconst ApiError = require('./ApiError')\n\nconst resourceCaster = require('./Caster')\n\n// TODO terrible name\nclass BaseClient {\n  constructor (apiKey, siteId) {\n    this.siteId = siteId\n    this.httpOptions = {\n      // TODO will need to be configurable from playground\n      // at some point\n      host: 'partner-api.recurly.com',\n      headers: {\n        'Accept': `application/vnd.recurly.${this.apiVersion()}`,\n        // TODO need a standardized user agent\n        'User-Agent': `Recurly/${pkg.name}:${pkg.version}`,\n        // TODO probably a standard way to do this with request\n        'Authorization': 'Basic ' + Buffer.from(apiKey + ':', 'ascii').toString('base64')\n      }\n    }\n  }\n\n  _interpolatePath (path, parameters = {}) {\n    parameters['site_id'] = this.siteId\n    Object.keys(parameters).forEach(name => {\n      path = path.replace(`{${name}}`, parameters[name])\n    })\n    return path\n  }\n\n  _makeRequest (method, path, request) {\n    const options = Object.assign({\n      method: method,\n      path: path\n    }, this.httpOptions)\n\n    let requestBody\n    if (request) {\n      requestBody = JSON.stringify(request)\n      options.headers['Content-Type'] = 'application/json'\n      options.headers['Content-Length'] = Buffer.byteLength(requestBody)\n    }\n\n    return new Promise((resolve, reject) => {\n      options.agent = new https.Agent(options)\n      console.log('Sending Request: ', options)\n      const request = https.request(options, (response) => {\n        const body = []\n        response.setEncoding('utf8')\n        response.on('data', (chunk) => body.push(chunk))\n        response.on('end', () => {\n          let jsonBody = JSON.parse(body.join(''))\n          console.log('Got Response: ', jsonBody)\n\n          if (response.statusCode < 200 || response.statusCode > 299) {\n            const err = jsonBody.error\n            reject(new ApiError(err.message, err.type, err.params))\n          } else {\n            resolve(resourceCaster(jsonBody))\n          }\n        })\n      })\n      request.on('error', err => {\n        reject(err)\n      })\n      if (requestBody) {\n        request.write(requestBody)\n      }\n      request.end()\n    })\n  }\n}\n\nmodule.exports = BaseClient\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/BaseClient.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "https",
    "memberof": "lib/recurly/BaseClient.js",
    "static": true,
    "longname": "lib/recurly/BaseClient.js~https",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/BaseClient.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "pkg",
    "memberof": "lib/recurly/BaseClient.js",
    "static": true,
    "longname": "lib/recurly/BaseClient.js~pkg",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/BaseClient.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "ApiError",
    "memberof": "lib/recurly/BaseClient.js",
    "static": true,
    "longname": "lib/recurly/BaseClient.js~ApiError",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/BaseClient.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "resourceCaster",
    "memberof": "lib/recurly/BaseClient.js",
    "static": true,
    "longname": "lib/recurly/BaseClient.js~resourceCaster",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/BaseClient.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "class",
    "name": "BaseClient",
    "memberof": "lib/recurly/BaseClient.js",
    "static": true,
    "longname": "lib/recurly/BaseClient.js~BaseClient",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/BaseClient.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/recurly/BaseClient.js~BaseClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/BaseClient.js~BaseClient#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "siteId",
    "memberof": "lib/recurly/BaseClient.js~BaseClient",
    "static": false,
    "longname": "lib/recurly/BaseClient.js~BaseClient#siteId",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "httpOptions",
    "memberof": "lib/recurly/BaseClient.js~BaseClient",
    "static": false,
    "longname": "lib/recurly/BaseClient.js~BaseClient#httpOptions",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{\"host\": string, \"headers\": *}"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "_interpolatePath",
    "memberof": "lib/recurly/BaseClient.js~BaseClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/BaseClient.js~BaseClient#_interpolatePath",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "_makeRequest",
    "memberof": "lib/recurly/BaseClient.js~BaseClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/BaseClient.js~BaseClient#_makeRequest",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "request",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "lib/recurly/Caster.js",
    "content": "const resources = require('./resources')\n\nconst dtRegex = /^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\\\.[0-9]+)?(Z)?$/\n\nfunction className (obj) {\n  const objName = obj.object\n  if (!objName) return null\n  return objName\n    .replace(/_([a-z])/g, g => g[1].toUpperCase())\n    .replace(/^\\w/, g => g.toUpperCase())\n}\n\nfunction construct (Klass, data) {\n  return Object.assign(new Klass(), data)\n}\n\nfunction cast (obj) {\n  const name = className(obj)\n  const Klass = resources[name]\n  // if it doesn't have a class name,\n  // just return as a hash for now\n  // might want to cast these values though\n  if (!(name && Klass)) return obj\n\n  // I assume we don't need this, maybe we\n  // want to preserve it for some reason\n  delete obj['object']\n\n  const resource = construct(Klass, obj)\n  for (let key in resource) {\n    const value = resource[key]\n\n    if (value) {\n      // if it's a resource, cast the item\n      if (value.object) {\n        resource[key] = cast(value)\n      // if it's an array, cast each element\n      } else if (Array.isArray(value)) {\n        if (value.length > 0 && value[0].object) {\n          resource[key] = value.map(v => cast(v))\n        }\n      // cast other special types like datetimes\n      } else if (typeof value === 'string') {\n        // TODO check the performance of this approach\n        if (value.match(dtRegex)) {\n          resource[key] = new Date(value)\n        }\n      }\n    }\n  }\n\n  return resource\n}\n\nmodule.exports = cast\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/Caster.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "resources",
    "memberof": "lib/recurly/Caster.js",
    "static": true,
    "longname": "lib/recurly/Caster.js~resources",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/Caster.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "dtRegex",
    "memberof": "lib/recurly/Caster.js",
    "static": true,
    "longname": "lib/recurly/Caster.js~dtRegex",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/Caster.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "className",
    "memberof": "lib/recurly/Caster.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/recurly/Caster.js~className",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/Caster.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "construct",
    "memberof": "lib/recurly/Caster.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/recurly/Caster.js~construct",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/Caster.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "Klass",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "cast",
    "memberof": "lib/recurly/Caster.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/recurly/Caster.js~cast",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/Caster.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "lib/recurly/Client.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\nconst BaseClient = require('./BaseClient')\n\nconst Pager = require('./Pager')\n\n/**\n *\n * @param {string} apiKey - The private api key.\n * @param {string} siteId - The site id. Accepts the base-36 id or format: `subdomain-${subdomain}`.\n */\nclass Client extends BaseClient {\n  apiVersion () {\n    return 'v2018-10-04'\n  }\n\n  /**\n   * List sites\n   *\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @return {Pager<Site>} A list of sites.\n   */\n  listSites (params = {}) {\n    let path = '/sites'\n    path = this._interpolatePath(path)\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Fetch a site\n   *\n   * @return {Promise<Site>} A site.\n   */\n  async getSite () {\n    let path = '/sites/{site_id}'\n    path = this._interpolatePath(path)\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * List a site's accounts\n   *\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.subscriber - Filter accounts accounts with or without a subscription in the `active`,\n   *   `canceled`, or `future` state.\n   *\n   * @param {string} params.pastDue - Filter for accounts with an invoice in the `past_due` state.\n   * @return {Pager<Account>} A list of the site's accounts.\n   */\n  listAccounts (params = {}) {\n    let path = '/sites/{site_id}/accounts'\n    path = this._interpolatePath(path)\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Create an account\n   *\n   * @param {AccountCreate} body - The object representing the JSON request to send to the server. It should conform to the schema of {AccountCreate}\n   * @return {Promise<Account>} An account.\n   */\n  async createAccount (body) {\n    let path = '/sites/{site_id}/accounts'\n    path = this._interpolatePath(path)\n    return this._makeRequest('POST', path, body)\n  }\n\n  /**\n   * Fetch an account\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @return {Promise<Account>} An account.\n   */\n  async getAccount (accountId) {\n    let path = '/sites/{site_id}/accounts/{account_id}'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Modify an account\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {AccountUpdate} body - The object representing the JSON request to send to the server. It should conform to the schema of {AccountUpdate}\n   * @return {Promise<Account>} An account.\n   */\n  async updateAccount (accountId, body) {\n    let path = '/sites/{site_id}/accounts/{account_id}'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('PUT', path, body)\n  }\n\n  /**\n   * Deactivate an account\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @return {Promise<Account>} An account.\n   */\n  async deactivateAccount (accountId) {\n    let path = '/sites/{site_id}/accounts/{account_id}'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('DELETE', path, null)\n  }\n\n  /**\n   * Fetch an account's acquisition data\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @return {Promise<AccountAcquisition>} An account's acquisition data.\n   */\n  async getAccountAcquisition (accountId) {\n    let path = '/sites/{site_id}/accounts/{account_id}/acquisition'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Update an account's acquisition data\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {AccountAcquisitionUpdatable} body - The object representing the JSON request to send to the server. It should conform to the schema of {AccountAcquisitionUpdatable}\n   * @return {Promise<AccountAcquisition>} An account's updated acquisition data.\n   */\n  async updateAccountAcquisition (accountId, body) {\n    let path = '/sites/{site_id}/accounts/{account_id}/acquisition'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('PUT', path, body)\n  }\n\n  /**\n   * Remove an account's acquisition data\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @return {Promise} Acquisition data was succesfully deleted.\n   */\n  async removeAccountAcquisition (accountId) {\n    let path = '/sites/{site_id}/accounts/{account_id}/acquisition'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('DELETE', path, null)\n  }\n\n  /**\n   * Reactivate an inactive account\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @return {Promise<Account>} An account.\n   */\n  async reactivateAccount (accountId) {\n    let path = '/sites/{site_id}/accounts/{account_id}/reactivate'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('PUT', path, null)\n  }\n\n  /**\n   * Fetch an account's balance and past due status\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @return {Promise<AccountBalance>} An account's balance.\n   */\n  async getAccountBalance (accountId) {\n    let path = '/sites/{site_id}/accounts/{account_id}/balance'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Fetch an account's billing information\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @return {Promise<BillingInfo>} An account's billing information.\n   */\n  async getBillingInfo (accountId) {\n    let path = '/sites/{site_id}/accounts/{account_id}/billing_info'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Set an account's billing information\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {BillingInfoCreate} body - The object representing the JSON request to send to the server. It should conform to the schema of {BillingInfoCreate}\n   * @return {Promise<BillingInfo>} Updated billing information.\n   */\n  async updateBillingInfo (accountId, body) {\n    let path = '/sites/{site_id}/accounts/{account_id}/billing_info'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('PUT', path, body)\n  }\n\n  /**\n   * Remove an account's billing information\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @return {Promise} Billing information deleted\n   */\n  async removeBillingInfo (accountId) {\n    let path = '/sites/{site_id}/accounts/{account_id}/billing_info'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('DELETE', path, null)\n  }\n\n  /**\n   * Show the coupon redemptions for an account\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @return {Pager<CouponRedemption>} A list of the the coupon redemptions on an account.\n   */\n  listAccountCouponRedemptions (accountId, params = {}) {\n    let path = '/sites/{site_id}/accounts/{account_id}/coupon_redemptions'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Show the coupon redemption that is active on an account\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @return {Promise<CouponRedemption>} An active coupon redemption on an account.\n   */\n  async getActiveCouponRedemption (accountId) {\n    let path = '/sites/{site_id}/accounts/{account_id}/coupon_redemptions/active'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Generate an active coupon redemption on an account\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {CouponRedemptionCreate} body - The object representing the JSON request to send to the server. It should conform to the schema of {CouponRedemptionCreate}\n   * @return {Promise<CouponRedemption>} Returns the new coupon redemption.\n   */\n  async createCouponRedemption (accountId, body) {\n    let path = '/sites/{site_id}/accounts/{account_id}/coupon_redemptions/active'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('POST', path, body)\n  }\n\n  /**\n   * Delete the active coupon redemption from an account\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @return {Promise<CouponRedemption>} Coupon redemption deleted.\n   */\n  async removeCouponRedemption (accountId) {\n    let path = '/sites/{site_id}/accounts/{account_id}/coupon_redemptions/active'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('DELETE', path, null)\n  }\n\n  /**\n   * List an account's credit payments\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @return {Pager<CreditPayment>} A list of the account's credit payments.\n   */\n  listAccountCreditPayments (accountId, params = {}) {\n    let path = '/sites/{site_id}/accounts/{account_id}/credit_payments'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * List an account's invoices\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.type - Filter by type when:\n   *   - `type=charge`, only charge invoices will be returned.\n   *   - `type=credit`, only credit invoices will be returned.\n   *   - `type=non-legacy`, only charge and credit invoices will be returned.\n   *   - `type=legacy`, only legacy invoices will be returned.\n   *\n   * @return {Pager<Invoice>} A list of the account's invoices.\n   */\n  listAccountInvoices (accountId, params = {}) {\n    let path = '/sites/{site_id}/accounts/{account_id}/invoices'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Create an invoice for pending line items\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {InvoiceCreate} body - The object representing the JSON request to send to the server. It should conform to the schema of {InvoiceCreate}\n   * @return {Promise<InvoiceCollection>} Returns the new invoices.\n   */\n  async createInvoice (accountId, body) {\n    let path = '/sites/{site_id}/accounts/{account_id}/invoices'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('POST', path, body)\n  }\n\n  /**\n   * Preview new invoice for pending line items\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {InvoiceCreate} body - The object representing the JSON request to send to the server. It should conform to the schema of {InvoiceCreate}\n   * @return {Promise<InvoiceCollection>} Returns the invoice previews.\n   */\n  async previewInvoice (accountId, body) {\n    let path = '/sites/{site_id}/accounts/{account_id}/invoices/preview'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('POST', path, body)\n  }\n\n  /**\n   * List an account's line items\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.original - Filter by original field.\n   * @param {string} params.state - Filter by state field.\n   * @param {string} params.type - Filter by type field.\n   * @return {Pager<LineItem>} A list of the account's line items.\n   */\n  listAccountLineItems (accountId, params = {}) {\n    let path = '/sites/{site_id}/accounts/{account_id}/line_items'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Create a new line item for the account\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {LineItemCreate} body - The object representing the JSON request to send to the server. It should conform to the schema of {LineItemCreate}\n   * @return {Promise<LineItem>} Returns the new line item.\n   */\n  async createLineItem (accountId, body) {\n    let path = '/sites/{site_id}/accounts/{account_id}/line_items'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('POST', path, body)\n  }\n\n  /**\n   * Fetch a list of an account's notes\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @return {Pager<AccountNote>} A list of an account's notes.\n   */\n  listAccountNotes (accountId, params = {}) {\n    let path = '/sites/{site_id}/accounts/{account_id}/notes'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Fetch an account note\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {string} accountNoteId - Account Note ID.\n   * @return {Promise<AccountNote>} An account note.\n   */\n  async getAccountNote (accountId, accountNoteId) {\n    let path = '/sites/{site_id}/accounts/{account_id}/notes/{account_note_id}'\n    path = this._interpolatePath(path, { 'account_id': accountId, 'account_note_id': accountNoteId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Fetch a list of an account's shipping addresses\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @return {Pager<ShippingAddress>} A list of an account's shipping addresses.\n   */\n  listShippingAddresses (accountId, params = {}) {\n    let path = '/sites/{site_id}/accounts/{account_id}/shipping_addresses'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Create a new shipping address for the account\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {ShippingAddressCreate} body - The object representing the JSON request to send to the server. It should conform to the schema of {ShippingAddressCreate}\n   * @return {Promise<ShippingAddress>} Returns the new shipping address.\n   */\n  async createShippingAddress (accountId, body) {\n    let path = '/sites/{site_id}/accounts/{account_id}/shipping_addresses'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return this._makeRequest('POST', path, body)\n  }\n\n  /**\n   * Fetch an account's shipping address\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {string} shippingAddressId - Shipping Address ID.\n   * @return {Promise<ShippingAddress>} A shipping address.\n   */\n  async getShippingAddress (accountId, shippingAddressId) {\n    let path = '/sites/{site_id}/accounts/{account_id}/shipping_addresses/{shipping_address_id}'\n    path = this._interpolatePath(path, { 'account_id': accountId, 'shipping_address_id': shippingAddressId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Update an account's shipping address\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {string} shippingAddressId - Shipping Address ID.\n   * @param {ShippingAddressUpdate} body - The object representing the JSON request to send to the server. It should conform to the schema of {ShippingAddressUpdate}\n   * @return {Promise<ShippingAddress>} The updated shipping address.\n   */\n  async updateShippingAddress (accountId, shippingAddressId, body) {\n    let path = '/sites/{site_id}/accounts/{account_id}/shipping_addresses/{shipping_address_id}'\n    path = this._interpolatePath(path, { 'account_id': accountId, 'shipping_address_id': shippingAddressId })\n    return this._makeRequest('PUT', path, body)\n  }\n\n  /**\n   * Remove an account's shipping address\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {string} shippingAddressId - Shipping Address ID.\n   * @return {Promise} Shipping address deleted.\n   */\n  async removeShippingAddress (accountId, shippingAddressId) {\n    let path = '/sites/{site_id}/accounts/{account_id}/shipping_addresses/{shipping_address_id}'\n    path = this._interpolatePath(path, { 'account_id': accountId, 'shipping_address_id': shippingAddressId })\n    return this._makeRequest('DELETE', path, null)\n  }\n\n  /**\n   * List an account's subscriptions\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.state - Filter by state.\n   *   - When `state=active`, `state=canceled`, `state=expired`, or `state=future`, subscriptions with states that match the query and only those subscriptions will be returned.\n   *   - When `state=in_trial`, only subscriptions that have a trial_started_at date earlier than now and a trial_ends_at date later than now will be returned.\n   *   - When `state=live`, only subscriptions that are in an active, canceled, or future state or are in trial will be returned.\n   *\n   * @return {Pager<Subscription>} A list of the account's subscriptions.\n   */\n  listAccountSubscriptions (accountId, params = {}) {\n    let path = '/sites/{site_id}/accounts/{account_id}/subscriptions'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * List an account's transactions\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.type - Filter by type field. The value `payment` will return both `purchase` and `capture` transactions.\n   * @param {string} params.success - Filter by success field.\n   * @return {Pager<Transaction>} A list of the account's transactions.\n   */\n  listAccountTransactions (accountId, params = {}) {\n    let path = '/sites/{site_id}/accounts/{account_id}/transactions'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * List an account's child accounts\n   *\n   * @param {string} accountId - Account ID or code (use prefix: `code-`, e.g. `code-bob`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.subscriber - Filter accounts accounts with or without a subscription in the `active`,\n   *   `canceled`, or `future` state.\n   *\n   * @param {string} params.pastDue - Filter for accounts with an invoice in the `past_due` state.\n   * @return {Pager<Account>} A list of an account's child accounts.\n   */\n  listChildAccounts (accountId, params = {}) {\n    let path = '/sites/{site_id}/accounts/{account_id}/accounts'\n    path = this._interpolatePath(path, { 'account_id': accountId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * List a site's account acquisition data\n   *\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @return {Promise<AccountAcquisition>} A list of the site's account acquisition data.\n   */\n  async listAccountAcquisition (params = {}) {\n    let path = '/sites/{site_id}/acquisitions'\n    path = this._interpolatePath(path)\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * List a site's coupons\n   *\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @return {Pager<Coupon>} A list of the site's coupons.\n   */\n  listCoupons (params = {}) {\n    let path = '/sites/{site_id}/coupons'\n    path = this._interpolatePath(path)\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Create a new coupon\n   *\n   * @param {CouponCreate} body - The object representing the JSON request to send to the server. It should conform to the schema of {CouponCreate}\n   * @return {Promise<Coupon>} A new coupon.\n   */\n  async createCoupon (body) {\n    let path = '/sites/{site_id}/coupons'\n    path = this._interpolatePath(path)\n    return this._makeRequest('POST', path, body)\n  }\n\n  /**\n   * Fetch a coupon\n   *\n   * @param {string} couponId - Coupon ID or code (use prefix: `code-`, e.g. `code-10off`).\n   * @return {Promise<Coupon>} A coupon.\n   */\n  async getCoupon (couponId) {\n    let path = '/sites/{site_id}/coupons/{coupon_id}'\n    path = this._interpolatePath(path, { 'coupon_id': couponId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Update an active coupon\n   *\n   * @param {string} couponId - Coupon ID or code (use prefix: `code-`, e.g. `code-10off`).\n   * @param {CouponUpdate} body - The object representing the JSON request to send to the server. It should conform to the schema of {CouponUpdate}\n   * @return {Promise<Coupon>} The updated coupon.\n   */\n  async updateCoupon (couponId, body) {\n    let path = '/sites/{site_id}/coupons/{coupon_id}'\n    path = this._interpolatePath(path, { 'coupon_id': couponId })\n    return this._makeRequest('PUT', path, body)\n  }\n\n  /**\n   * List unique coupon codes associated with a bulk coupon\n   *\n   * @param {string} couponId - Coupon ID or code (use prefix: `code-`, e.g. `code-10off`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @return {Pager<UniqueCouponCode>} A list of unique coupon codes that were generated\n   */\n  listUniqueCouponCodes (couponId, params = {}) {\n    let path = '/sites/{site_id}/coupons/{coupon_id}/unique_coupon_codes'\n    path = this._interpolatePath(path, { 'coupon_id': couponId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * List a site's credit payments\n   *\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @return {Pager<CreditPayment>} A list of the site's credit payments.\n   */\n  listCreditPayments (params = {}) {\n    let path = '/sites/{site_id}/credit_payments'\n    path = this._interpolatePath(path)\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Fetch a credit payment\n   *\n   * @param {string} creditPaymentId - Credit Payment ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @return {Promise<CreditPayment>} A credit payment.\n   */\n  async getCreditPayment (creditPaymentId) {\n    let path = '/sites/{site_id}/credit_payments/{credit_payment_id}'\n    path = this._interpolatePath(path, { 'credit_payment_id': creditPaymentId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * List a site's custom field definitions\n   *\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @return {Pager<CustomFieldDefinition>} A list of the site's custom field definitions.\n   */\n  listCustomFieldDefinitions (params = {}) {\n    let path = '/sites/{site_id}/custom_field_definitions'\n    path = this._interpolatePath(path)\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Fetch an custom field definition\n   *\n   * @param {string} customFieldDefinitionId - Custom Field Definition ID\n   * @return {Promise<CustomFieldDefinition>} An custom field definition.\n   */\n  async getCustomFieldDefinition (customFieldDefinitionId) {\n    let path = '/sites/{site_id}/custom_field_definitions/{custom_field_definition_id}'\n    path = this._interpolatePath(path, { 'custom_field_definition_id': customFieldDefinitionId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * List a site's invoices\n   *\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.type - Filter by type when:\n   *   - `type=charge`, only charge invoices will be returned.\n   *   - `type=credit`, only credit invoices will be returned.\n   *   - `type=non-legacy`, only charge and credit invoices will be returned.\n   *   - `type=legacy`, only legacy invoices will be returned.\n   *\n   * @return {Pager<Invoice>} A list of the site's invoices.\n   */\n  listInvoices (params = {}) {\n    let path = '/sites/{site_id}/invoices'\n    path = this._interpolatePath(path)\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Fetch an invoice\n   *\n   * @param {string} invoiceId - Invoice ID or number (use prefix: `number-`, e.g. `number-1000`).\n   * @return {Promise<Invoice>} An invoice.\n   */\n  async getInvoice (invoiceId) {\n    let path = '/sites/{site_id}/invoices/{invoice_id}'\n    path = this._interpolatePath(path, { 'invoice_id': invoiceId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Update an invoice\n   *\n   * @param {string} invoiceId - Invoice ID or number (use prefix: `number-`, e.g. `number-1000`).\n   * @param {InvoiceUpdatable} body - The object representing the JSON request to send to the server. It should conform to the schema of {InvoiceUpdatable}\n   * @return {Promise<Invoice>} An invoice.\n   */\n  async putInvoice (invoiceId, body) {\n    let path = '/sites/{site_id}/invoices/{invoice_id}'\n    path = this._interpolatePath(path, { 'invoice_id': invoiceId })\n    return this._makeRequest('PUT', path, body)\n  }\n\n  /**\n   * Collect a pending or past due, automatic invoice\n   *\n   * @param {string} invoiceId - Invoice ID or number (use prefix: `number-`, e.g. `number-1000`).\n   * @return {Promise<Invoice>} The updated invoice.\n   */\n  async collectInvoice (invoiceId) {\n    let path = '/sites/{site_id}/invoices/{invoice_id}/collect'\n    path = this._interpolatePath(path, { 'invoice_id': invoiceId })\n    return this._makeRequest('PUT', path, null)\n  }\n\n  /**\n   * Mark an open invoice as failed\n   *\n   * @param {string} invoiceId - Invoice ID or number (use prefix: `number-`, e.g. `number-1000`).\n   * @return {Promise<Invoice>} The updated invoice.\n   */\n  async failInvoice (invoiceId) {\n    let path = '/sites/{site_id}/invoices/{invoice_id}/mark_failed'\n    path = this._interpolatePath(path, { 'invoice_id': invoiceId })\n    return this._makeRequest('PUT', path, null)\n  }\n\n  /**\n   * Mark an open invoice as successful\n   *\n   * @param {string} invoiceId - Invoice ID or number (use prefix: `number-`, e.g. `number-1000`).\n   * @return {Promise<Invoice>} The updated invoice.\n   */\n  async markInvoiceSuccessful (invoiceId) {\n    let path = '/sites/{site_id}/invoices/{invoice_id}/mark_successful'\n    path = this._interpolatePath(path, { 'invoice_id': invoiceId })\n    return this._makeRequest('PUT', path, null)\n  }\n\n  /**\n   * Reopen a closed, manual invoice\n   *\n   * @param {string} invoiceId - Invoice ID or number (use prefix: `number-`, e.g. `number-1000`).\n   * @return {Promise<Invoice>} The updated invoice.\n   */\n  async reopenInvoice (invoiceId) {\n    let path = '/sites/{site_id}/invoices/{invoice_id}/reopen'\n    path = this._interpolatePath(path, { 'invoice_id': invoiceId })\n    return this._makeRequest('PUT', path, null)\n  }\n\n  /**\n   * List a invoice's line items\n   *\n   * @param {string} invoiceId - Invoice ID or number (use prefix: `number-`, e.g. `number-1000`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.original - Filter by original field.\n   * @param {string} params.state - Filter by state field.\n   * @param {string} params.type - Filter by type field.\n   * @return {Pager<LineItem>} A list of the invoice's line items.\n   */\n  listInvoiceLineItems (invoiceId, params = {}) {\n    let path = '/sites/{site_id}/invoices/{invoice_id}/line_items'\n    path = this._interpolatePath(path, { 'invoice_id': invoiceId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Show the coupon redemptions applied to an invoice\n   *\n   * @param {string} invoiceId - Invoice ID or number (use prefix: `number-`, e.g. `number-1000`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @return {Pager<CouponRedemption>} A list of the the coupon redemptions associated with the invoice.\n   */\n  listInvoiceCouponRedemptions (invoiceId, params = {}) {\n    let path = '/sites/{site_id}/invoices/{invoice_id}/coupon_redemptions'\n    path = this._interpolatePath(path, { 'invoice_id': invoiceId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * List an invoice's related credit or charge invoices\n   *\n   * @param {string} invoiceId - Invoice ID or number (use prefix: `number-`, e.g. `number-1000`).\n   * @return {Pager<Invoice>} A list of the credit or charge invoices associated with the invoice.\n   */\n  listRelatedInvoices (invoiceId, params = {}) {\n    let path = '/sites/{site_id}/invoices/{invoice_id}/related_invoices'\n    path = this._interpolatePath(path, { 'invoice_id': invoiceId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Refund an invoice\n   *\n   * @param {string} invoiceId - Invoice ID or number (use prefix: `number-`, e.g. `number-1000`).\n   * @param {InvoiceRefund} body - The object representing the JSON request to send to the server. It should conform to the schema of {InvoiceRefund}\n   * @return {Promise<Invoice>} Returns the new credit invoice.\n   */\n  async refundInvoice (invoiceId, body) {\n    let path = '/sites/{site_id}/invoices/{invoice_id}/refund'\n    path = this._interpolatePath(path, { 'invoice_id': invoiceId })\n    return this._makeRequest('POST', path, body)\n  }\n\n  /**\n   * List a site's line items\n   *\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.original - Filter by original field.\n   * @param {string} params.state - Filter by state field.\n   * @param {string} params.type - Filter by type field.\n   * @return {Pager<LineItem>} A list of the site's line items.\n   */\n  listLineItems (params = {}) {\n    let path = '/sites/{site_id}/line_items'\n    path = this._interpolatePath(path)\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Fetch a line item\n   *\n   * @param {string} lineItemId - Line Item ID.\n   * @return {Promise<LineItem>} A line item.\n   */\n  async getLineItem (lineItemId) {\n    let path = '/sites/{site_id}/line_items/{line_item_id}'\n    path = this._interpolatePath(path, { 'line_item_id': lineItemId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Delete an uninvoiced line item\n   *\n   * @param {string} lineItemId - Line Item ID.\n   * @return {Promise} Line item deleted.\n   */\n  async removeLineItem (lineItemId) {\n    let path = '/sites/{site_id}/line_items/{line_item_id}'\n    path = this._interpolatePath(path, { 'line_item_id': lineItemId })\n    return this._makeRequest('DELETE', path, null)\n  }\n\n  /**\n   * List a site's plans\n   *\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.state - Filter by state.\n   * @return {Pager<Plan>} A list of plans.\n   */\n  listPlans (params = {}) {\n    let path = '/sites/{site_id}/plans'\n    path = this._interpolatePath(path)\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Create a plan\n   *\n   * @param {PlanCreate} body - The object representing the JSON request to send to the server. It should conform to the schema of {PlanCreate}\n   * @return {Promise<Plan>} A plan.\n   */\n  async createPlan (body) {\n    let path = '/sites/{site_id}/plans'\n    path = this._interpolatePath(path)\n    return this._makeRequest('POST', path, body)\n  }\n\n  /**\n   * Fetch a plan\n   *\n   * @param {string} planId - Plan ID or code (use prefix: `code-`, e.g. `code-gold`).\n   * @return {Promise<Plan>} A plan.\n   */\n  async getPlan (planId) {\n    let path = '/sites/{site_id}/plans/{plan_id}'\n    path = this._interpolatePath(path, { 'plan_id': planId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Update a plan\n   *\n   * @param {string} planId - Plan ID or code (use prefix: `code-`, e.g. `code-gold`).\n   * @param {PlanUpdate} body - The object representing the JSON request to send to the server. It should conform to the schema of {PlanUpdate}\n   * @return {Promise<Plan>} A plan.\n   */\n  async updatePlan (planId, body) {\n    let path = '/sites/{site_id}/plans/{plan_id}'\n    path = this._interpolatePath(path, { 'plan_id': planId })\n    return this._makeRequest('PUT', path, body)\n  }\n\n  /**\n   * Remove a plan\n   *\n   * @param {string} planId - Plan ID or code (use prefix: `code-`, e.g. `code-gold`).\n   * @return {Promise<Plan>} Plan deleted\n   */\n  async removePlan (planId) {\n    let path = '/sites/{site_id}/plans/{plan_id}'\n    path = this._interpolatePath(path, { 'plan_id': planId })\n    return this._makeRequest('DELETE', path, null)\n  }\n\n  /**\n   * List a plan's add-ons\n   *\n   * @param {string} planId - Plan ID or code (use prefix: `code-`, e.g. `code-gold`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.state - Filter by state.\n   * @return {Pager<AddOn>} A list of add-ons.\n   */\n  listPlanAddOns (planId, params = {}) {\n    let path = '/sites/{site_id}/plans/{plan_id}/add_ons'\n    path = this._interpolatePath(path, { 'plan_id': planId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Create an add-on\n   *\n   * @param {string} planId - Plan ID or code (use prefix: `code-`, e.g. `code-gold`).\n   * @param {AddOnCreate} body - The object representing the JSON request to send to the server. It should conform to the schema of {AddOnCreate}\n   * @return {Promise<AddOn>} An add-on.\n   */\n  async createPlanAddOn (planId, body) {\n    let path = '/sites/{site_id}/plans/{plan_id}/add_ons'\n    path = this._interpolatePath(path, { 'plan_id': planId })\n    return this._makeRequest('POST', path, body)\n  }\n\n  /**\n   * Fetch a plan's add-on\n   *\n   * @param {string} addOnId - Add-on ID or code (use prefix: `code-`, e.g. `code-gold`).\n   * @param {string} planId - Plan ID or code (use prefix: `code-`, e.g. `code-gold`).\n   * @return {Promise<AddOn>} An add-on.\n   */\n  async getPlanAddOn (addOnId, planId) {\n    let path = '/sites/{site_id}/plans/{plan_id}/add_ons/{add_on_id}'\n    path = this._interpolatePath(path, { 'add_on_id': addOnId, 'plan_id': planId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Update an add-on\n   *\n   * @param {string} addOnId - Add-on ID or code (use prefix: `code-`, e.g. `code-gold`).\n   * @param {string} planId - Plan ID or code (use prefix: `code-`, e.g. `code-gold`).\n   * @param {AddOnUpdate} body - The object representing the JSON request to send to the server. It should conform to the schema of {AddOnUpdate}\n   * @return {Promise<AddOn>} An add-on.\n   */\n  async updatePlanAddOn (addOnId, planId, body) {\n    let path = '/sites/{site_id}/plans/{plan_id}/add_ons/{add_on_id}'\n    path = this._interpolatePath(path, { 'add_on_id': addOnId, 'plan_id': planId })\n    return this._makeRequest('PUT', path, body)\n  }\n\n  /**\n   * Remove an add-on\n   *\n   * @param {string} addOnId - Add-on ID or code (use prefix: `code-`, e.g. `code-gold`).\n   * @param {string} planId - Plan ID or code (use prefix: `code-`, e.g. `code-gold`).\n   * @return {Promise<AddOn>} Add-on deleted\n   */\n  async removePlanAddOn (addOnId, planId) {\n    let path = '/sites/{site_id}/plans/{plan_id}/add_ons/{add_on_id}'\n    path = this._interpolatePath(path, { 'add_on_id': addOnId, 'plan_id': planId })\n    return this._makeRequest('DELETE', path, null)\n  }\n\n  /**\n   * List a site's add-ons\n   *\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.state - Filter by state.\n   * @return {Pager<AddOn>} A list of add-ons.\n   */\n  listAddOns (params = {}) {\n    let path = '/sites/{site_id}/add_ons'\n    path = this._interpolatePath(path)\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Fetch an add-on\n   *\n   * @param {string} addOnId - Add-on ID or code (use prefix: `code-`, e.g. `code-gold`).\n   * @return {Promise<AddOn>} An add-on.\n   */\n  async getAddOn (addOnId) {\n    let path = '/sites/{site_id}/add_ons/{add_on_id}'\n    path = this._interpolatePath(path, { 'add_on_id': addOnId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * List a site's shipping services\n   *\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @return {Pager<ShippingMethod>} A list of the site's shipping services.\n   */\n  listShippingServices (params = {}) {\n    let path = '/sites/{site_id}/shipping_services'\n    path = this._interpolatePath(path)\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Fetch a shipping service\n   *\n   * @param {string} id - Shipping Service ID or code (use prefix: `code-`, e.g. `code-usps_2-day`).\n   * @return {Promise<ShippingMethod>} A shipping_service.\n   */\n  async getShippingService (id) {\n    let path = '/sites/{site_id}/shipping_services/{id}'\n    path = this._interpolatePath(path, { 'id': id })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * List a site's subscriptions\n   *\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.state - Filter by state.\n   *   - When `state=active`, `state=canceled`, `state=expired`, or `state=future`, subscriptions with states that match the query and only those subscriptions will be returned.\n   *   - When `state=in_trial`, only subscriptions that have a trial_started_at date earlier than now and a trial_ends_at date later than now will be returned.\n   *   - When `state=live`, only subscriptions that are in an active, canceled, or future state or are in trial will be returned.\n   *\n   * @return {Pager<Subscription>} A list of the site's subscriptions.\n   */\n  listSubscriptions (params = {}) {\n    let path = '/sites/{site_id}/subscriptions'\n    path = this._interpolatePath(path)\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Create a new subscription\n   *\n   * @param {SubscriptionCreate} body - The object representing the JSON request to send to the server. It should conform to the schema of {SubscriptionCreate}\n   * @return {Promise<Subscription>} A subscription.\n   */\n  async createSubscription (body) {\n    let path = '/sites/{site_id}/subscriptions'\n    path = this._interpolatePath(path)\n    return this._makeRequest('POST', path, body)\n  }\n\n  /**\n   * Fetch a subscription\n   *\n   * @param {string} subscriptionId - Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @return {Promise<Subscription>} A subscription.\n   */\n  async getSubscription (subscriptionId) {\n    let path = '/sites/{site_id}/subscriptions/{subscription_id}'\n    path = this._interpolatePath(path, { 'subscription_id': subscriptionId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Modify a subscription\n   *\n   * @param {string} subscriptionId - Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @param {SubscriptionUpdate} body - The object representing the JSON request to send to the server. It should conform to the schema of {SubscriptionUpdate}\n   * @return {Promise<Subscription>} A subscription.\n   */\n  async modifySubscription (subscriptionId, body) {\n    let path = '/sites/{site_id}/subscriptions/{subscription_id}'\n    path = this._interpolatePath(path, { 'subscription_id': subscriptionId })\n    return this._makeRequest('PUT', path, body)\n  }\n\n  /**\n   * Terminate a subscription\n   *\n   * @param {string} subscriptionId - Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {string} params.refund - The type of refund to perform:\n   *\n   *   * `full` - Performs a full refund of the last invoice for the current subscription term.\n   *   * `partial` - Prorates a refund based on the amount of time remaining in the current bill cycle.\n   *   * `none` - Terminates the subscription without a refund.\n   *\n   *   In the event that the most recent invoice is a $0 invoice paid entirely by credit, Recurly will apply the credit back to the customer’s account.\n   *\n   *   You may also terminate a subscription with no refund and then manually refund specific invoices.\n   *\n   * @return {Promise<Subscription>} An expired subscription.\n   */\n  async terminateSubscription (subscriptionId, params = {}) {\n    let path = '/sites/{site_id}/subscriptions/{subscription_id}'\n    path = this._interpolatePath(path, { 'subscription_id': subscriptionId })\n    return this._makeRequest('DELETE', path, null)\n  }\n\n  /**\n   * Cancel a subscription\n   *\n   * @param {string} subscriptionId - Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @return {Promise<Subscription>} A canceled or failed subscription.\n   */\n  async cancelSubscription (subscriptionId) {\n    let path = '/sites/{site_id}/subscriptions/{subscription_id}/cancel'\n    path = this._interpolatePath(path, { 'subscription_id': subscriptionId })\n    return this._makeRequest('PUT', path, null)\n  }\n\n  /**\n   * Reactivate a canceled subscription\n   *\n   * @param {string} subscriptionId - Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @return {Promise<Subscription>} An active subscription.\n   */\n  async reactivateSubscription (subscriptionId) {\n    let path = '/sites/{site_id}/subscriptions/{subscription_id}/reactivate'\n    path = this._interpolatePath(path, { 'subscription_id': subscriptionId })\n    return this._makeRequest('PUT', path, null)\n  }\n\n  /**\n   * Pause subscription\n   *\n   * @param {string} subscriptionId - Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @param {SubscriptionPause} body - The object representing the JSON request to send to the server. It should conform to the schema of {SubscriptionPause}\n   * @return {Promise<Subscription>} A subscription.\n   */\n  async pauseSubscription (subscriptionId, body) {\n    let path = '/sites/{site_id}/subscriptions/{subscription_id}/pause'\n    path = this._interpolatePath(path, { 'subscription_id': subscriptionId })\n    return this._makeRequest('PUT', path, body)\n  }\n\n  /**\n   * Resume subscription\n   *\n   * @param {string} subscriptionId - Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @return {Promise<Subscription>} A subscription.\n   */\n  async resumeSubscription (subscriptionId) {\n    let path = '/sites/{site_id}/subscriptions/{subscription_id}/resume'\n    path = this._interpolatePath(path, { 'subscription_id': subscriptionId })\n    return this._makeRequest('PUT', path, null)\n  }\n\n  /**\n   * Fetch a subscription's pending change\n   *\n   * @param {string} subscriptionId - Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @return {Promise<SubscriptionChange>} A subscription's pending change.\n   */\n  async getSubscriptionChange (subscriptionId) {\n    let path = '/sites/{site_id}/subscriptions/{subscription_id}/change'\n    path = this._interpolatePath(path, { 'subscription_id': subscriptionId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Create a new subscription change\n   *\n   * @param {string} subscriptionId - Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @param {SubscriptionChangeCreate} body - The object representing the JSON request to send to the server. It should conform to the schema of {SubscriptionChangeCreate}\n   * @return {Promise<SubscriptionChange>} A subscription change.\n   */\n  async createSubscriptionChange (subscriptionId, body) {\n    let path = '/sites/{site_id}/subscriptions/{subscription_id}/change'\n    path = this._interpolatePath(path, { 'subscription_id': subscriptionId })\n    return this._makeRequest('POST', path, body)\n  }\n\n  /**\n   * Delete the pending subscription change\n   *\n   * @param {string} subscriptionId - Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @return {Promise} Subscription change was deleted.\n   */\n  async removeSubscriptionChange (subscriptionId) {\n    let path = '/sites/{site_id}/subscriptions/{subscription_id}/change'\n    path = this._interpolatePath(path, { 'subscription_id': subscriptionId })\n    return this._makeRequest('DELETE', path, null)\n  }\n\n  /**\n   * List a subscription's invoices\n   *\n   * @param {string} subscriptionId - Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.type - Filter by type when:\n   *   - `type=charge`, only charge invoices will be returned.\n   *   - `type=credit`, only credit invoices will be returned.\n   *   - `type=non-legacy`, only charge and credit invoices will be returned.\n   *   - `type=legacy`, only legacy invoices will be returned.\n   *\n   * @return {Pager<Invoice>} A list of the subscription's invoices.\n   */\n  listSubscriptionInvoices (subscriptionId, params = {}) {\n    let path = '/sites/{site_id}/subscriptions/{subscription_id}/invoices'\n    path = this._interpolatePath(path, { 'subscription_id': subscriptionId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * List a subscription's line items\n   *\n   * @param {string} subscriptionId - Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.original - Filter by original field.\n   * @param {string} params.state - Filter by state field.\n   * @param {string} params.type - Filter by type field.\n   * @return {Pager<LineItem>} A list of the subscription's line items.\n   */\n  listSubscriptionLineItems (subscriptionId, params = {}) {\n    let path = '/sites/{site_id}/subscriptions/{subscription_id}/line_items'\n    path = this._interpolatePath(path, { 'subscription_id': subscriptionId })\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * List a site's transactions\n   *\n   * @param {Object} params - The optional url parameters for this request.\n   * @param {array} params.ids - Filter results by their IDs. Up to 200 IDs can be passed at once using\n   *   commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n   *\n   *   **Important notes:**\n   *   * The `ids` parameter cannot be used with any other ordering or filtering\n   *     parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n   *   * Invalid or unknown IDs will be ignored, so you should check that the\n   *     results correspond to your request.\n   *   * Records are returned in an arbitrary order. Since results are all\n   *     returned at once you can sort the records yourself.\n   *\n   * @param {number} params.limit - Limit number of records 1-200.\n   * @param {string} params.order - Sort order.\n   * @param {string} params.sort - Sort field. You *really* only want to sort by `updated_at` in ascending\n   *   order. In descending order updated records will move behind the cursor and could\n   *   prevent some records from being returned.\n   *\n   * @param {string} params.beginTime - Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.endTime - Filter by end_time when `sort=created_at` or `sort=updated_at`.\n   *   **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC.\n   *\n   * @param {string} params.type - Filter by type field. The value `payment` will return both `purchase` and `capture` transactions.\n   * @param {string} params.success - Filter by success field.\n   * @return {Pager<Transaction>} A list of the site's transactions.\n   */\n  listTransactions (params = {}) {\n    let path = '/sites/{site_id}/transactions'\n    path = this._interpolatePath(path)\n    return new Pager(this, path, params)\n  }\n\n  /**\n   * Fetch a transaction\n   *\n   * @param {string} transactionId - Transaction ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`).\n   * @return {Promise<Transaction>} A transaction.\n   */\n  async getTransaction (transactionId) {\n    let path = '/sites/{site_id}/transactions/{transaction_id}'\n    path = this._interpolatePath(path, { 'transaction_id': transactionId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Fetch a unique coupon code\n   *\n   * @param {string} uniqueCouponCodeId - Unique Coupon Code ID or code (use prefix: `code-`, e.g. `code-abc-8dh2-def`).\n   * @return {Promise<UniqueCouponCode>} A unique coupon code.\n   */\n  async getUniqueCouponCode (uniqueCouponCodeId) {\n    let path = '/sites/{site_id}/unique_coupon_codes/{unique_coupon_code_id}'\n    path = this._interpolatePath(path, { 'unique_coupon_code_id': uniqueCouponCodeId })\n    return this._makeRequest('GET', path, null)\n  }\n\n  /**\n   * Deactivate a unique coupon code\n   *\n   * @param {string} uniqueCouponCodeId - Unique Coupon Code ID or code (use prefix: `code-`, e.g. `code-abc-8dh2-def`).\n   * @return {Promise<UniqueCouponCode>} A unique coupon code.\n   */\n  async deactivateUniqueCouponCode (uniqueCouponCodeId) {\n    let path = '/sites/{site_id}/unique_coupon_codes/{unique_coupon_code_id}'\n    path = this._interpolatePath(path, { 'unique_coupon_code_id': uniqueCouponCodeId })\n    return this._makeRequest('DELETE', path, null)\n  }\n\n  /**\n   * Restore a unique coupon code\n   *\n   * @param {string} uniqueCouponCodeId - Unique Coupon Code ID or code (use prefix: `code-`, e.g. `code-abc-8dh2-def`).\n   * @return {Promise<UniqueCouponCode>} A unique coupon code.\n   */\n  async reactivateUniqueCouponCode (uniqueCouponCodeId) {\n    let path = '/sites/{site_id}/unique_coupon_codes/{unique_coupon_code_id}/restore'\n    path = this._interpolatePath(path, { 'unique_coupon_code_id': uniqueCouponCodeId })\n    return this._makeRequest('PUT', path, null)\n  }\n}\n\nmodule.exports = Client\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/Client.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "BaseClient",
    "memberof": "lib/recurly/Client.js",
    "static": true,
    "longname": "lib/recurly/Client.js~BaseClient",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/Client.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "Pager",
    "memberof": "lib/recurly/Client.js",
    "static": true,
    "longname": "lib/recurly/Client.js~Pager",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/Client.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "class",
    "name": "Client",
    "memberof": "lib/recurly/Client.js",
    "static": true,
    "longname": "lib/recurly/Client.js~Client",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/Client.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "apiKey",
        "description": "The private api key."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "siteId",
        "description": "The site id. Accepts the base-36 id or format: `subdomain-${subdomain}`."
      }
    ],
    "interface": false,
    "extends": [
      "BaseClient"
    ],
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "apiVersion",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#apiVersion",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "listSites",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listSites",
    "access": "public",
    "description": "List sites",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<Site>"
      ],
      "spread": false,
      "description": "A list of sites."
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "getSite",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getSite",
    "access": "public",
    "description": "Fetch a site",
    "lineNumber": 57,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Site>"
      ],
      "spread": false,
      "description": "A site."
    },
    "params": []
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "listAccounts",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listAccounts",
    "access": "public",
    "description": "List a site's accounts",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.subscriber",
        "description": "Filter accounts accounts with or without a subscription in the `active`,\n  `canceled`, or `future` state."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.pastDue",
        "description": "Filter for accounts with an invoice in the `past_due` state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<Account>"
      ],
      "spread": false,
      "description": "A list of the site's accounts."
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "createAccount",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#createAccount",
    "access": "public",
    "description": "Create an account",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "AccountCreate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {AccountCreate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Account>"
      ],
      "spread": false,
      "description": "An account."
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "getAccount",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getAccount",
    "access": "public",
    "description": "Fetch an account",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Account>"
      ],
      "spread": false,
      "description": "An account."
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "updateAccount",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#updateAccount",
    "access": "public",
    "description": "Modify an account",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "AccountUpdate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {AccountUpdate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Account>"
      ],
      "spread": false,
      "description": "An account."
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "deactivateAccount",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#deactivateAccount",
    "access": "public",
    "description": "Deactivate an account",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Account>"
      ],
      "spread": false,
      "description": "An account."
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "getAccountAcquisition",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getAccountAcquisition",
    "access": "public",
    "description": "Fetch an account's acquisition data",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AccountAcquisition>"
      ],
      "spread": false,
      "description": "An account's acquisition data."
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "updateAccountAcquisition",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#updateAccountAcquisition",
    "access": "public",
    "description": "Update an account's acquisition data",
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "AccountAcquisitionUpdatable"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {AccountAcquisitionUpdatable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AccountAcquisition>"
      ],
      "spread": false,
      "description": "An account's updated acquisition data."
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "removeAccountAcquisition",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#removeAccountAcquisition",
    "access": "public",
    "description": "Remove an account's acquisition data",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Acquisition data was succesfully deleted."
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "reactivateAccount",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#reactivateAccount",
    "access": "public",
    "description": "Reactivate an inactive account",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Account>"
      ],
      "spread": false,
      "description": "An account."
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "getAccountBalance",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getAccountBalance",
    "access": "public",
    "description": "Fetch an account's balance and past due status",
    "lineNumber": 206,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AccountBalance>"
      ],
      "spread": false,
      "description": "An account's balance."
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "getBillingInfo",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getBillingInfo",
    "access": "public",
    "description": "Fetch an account's billing information",
    "lineNumber": 218,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<BillingInfo>"
      ],
      "spread": false,
      "description": "An account's billing information."
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "updateBillingInfo",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#updateBillingInfo",
    "access": "public",
    "description": "Set an account's billing information",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "BillingInfoCreate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {BillingInfoCreate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<BillingInfo>"
      ],
      "spread": false,
      "description": "Updated billing information."
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "removeBillingInfo",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#removeBillingInfo",
    "access": "public",
    "description": "Remove an account's billing information",
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Billing information deleted"
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "listAccountCouponRedemptions",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listAccountCouponRedemptions",
    "access": "public",
    "description": "Show the coupon redemptions for an account",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<CouponRedemption>"
      ],
      "spread": false,
      "description": "A list of the the coupon redemptions on an account."
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "getActiveCouponRedemption",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getActiveCouponRedemption",
    "access": "public",
    "description": "Show the coupon redemption that is active on an account",
    "lineNumber": 279,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<CouponRedemption>"
      ],
      "spread": false,
      "description": "An active coupon redemption on an account."
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "createCouponRedemption",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#createCouponRedemption",
    "access": "public",
    "description": "Generate an active coupon redemption on an account",
    "lineNumber": 292,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "CouponRedemptionCreate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {CouponRedemptionCreate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<CouponRedemption>"
      ],
      "spread": false,
      "description": "Returns the new coupon redemption."
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "removeCouponRedemption",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#removeCouponRedemption",
    "access": "public",
    "description": "Delete the active coupon redemption from an account",
    "lineNumber": 304,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<CouponRedemption>"
      ],
      "spread": false,
      "description": "Coupon redemption deleted."
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "listAccountCreditPayments",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listAccountCreditPayments",
    "access": "public",
    "description": "List an account's credit payments",
    "lineNumber": 329,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<CreditPayment>"
      ],
      "spread": false,
      "description": "A list of the account's credit payments."
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "listAccountInvoices",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listAccountInvoices",
    "access": "public",
    "description": "List an account's invoices",
    "lineNumber": 371,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.type",
        "description": "Filter by type when:\n  - `type=charge`, only charge invoices will be returned.\n  - `type=credit`, only credit invoices will be returned.\n  - `type=non-legacy`, only charge and credit invoices will be returned.\n  - `type=legacy`, only legacy invoices will be returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<Invoice>"
      ],
      "spread": false,
      "description": "A list of the account's invoices."
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "createInvoice",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#createInvoice",
    "access": "public",
    "description": "Create an invoice for pending line items",
    "lineNumber": 384,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "InvoiceCreate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {InvoiceCreate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<InvoiceCollection>"
      ],
      "spread": false,
      "description": "Returns the new invoices."
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "previewInvoice",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#previewInvoice",
    "access": "public",
    "description": "Preview new invoice for pending line items",
    "lineNumber": 397,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "InvoiceCreate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {InvoiceCreate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<InvoiceCollection>"
      ],
      "spread": false,
      "description": "Returns the invoice previews."
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "listAccountLineItems",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listAccountLineItems",
    "access": "public",
    "description": "List an account's line items",
    "lineNumber": 436,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.original",
        "description": "Filter by original field."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.state",
        "description": "Filter by state field."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.type",
        "description": "Filter by type field."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<LineItem>"
      ],
      "spread": false,
      "description": "A list of the account's line items."
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "createLineItem",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#createLineItem",
    "access": "public",
    "description": "Create a new line item for the account",
    "lineNumber": 449,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "LineItemCreate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {LineItemCreate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<LineItem>"
      ],
      "spread": false,
      "description": "Returns the new line item."
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "listAccountNotes",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listAccountNotes",
    "access": "public",
    "description": "Fetch a list of an account's notes",
    "lineNumber": 473,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<AccountNote>"
      ],
      "spread": false,
      "description": "A list of an account's notes."
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "getAccountNote",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getAccountNote",
    "access": "public",
    "description": "Fetch an account note",
    "lineNumber": 486,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountNoteId",
        "description": "Account Note ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AccountNote>"
      ],
      "spread": false,
      "description": "An account note."
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "listShippingAddresses",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listShippingAddresses",
    "access": "public",
    "description": "Fetch a list of an account's shipping addresses",
    "lineNumber": 522,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<ShippingAddress>"
      ],
      "spread": false,
      "description": "A list of an account's shipping addresses."
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "createShippingAddress",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#createShippingAddress",
    "access": "public",
    "description": "Create a new shipping address for the account",
    "lineNumber": 535,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "ShippingAddressCreate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {ShippingAddressCreate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ShippingAddress>"
      ],
      "spread": false,
      "description": "Returns the new shipping address."
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "getShippingAddress",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getShippingAddress",
    "access": "public",
    "description": "Fetch an account's shipping address",
    "lineNumber": 548,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "shippingAddressId",
        "description": "Shipping Address ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ShippingAddress>"
      ],
      "spread": false,
      "description": "A shipping address."
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "updateShippingAddress",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#updateShippingAddress",
    "access": "public",
    "description": "Update an account's shipping address",
    "lineNumber": 562,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "shippingAddressId",
        "description": "Shipping Address ID."
      },
      {
        "nullable": null,
        "types": [
          "ShippingAddressUpdate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {ShippingAddressUpdate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ShippingAddress>"
      ],
      "spread": false,
      "description": "The updated shipping address."
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "removeShippingAddress",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#removeShippingAddress",
    "access": "public",
    "description": "Remove an account's shipping address",
    "lineNumber": 575,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "shippingAddressId",
        "description": "Shipping Address ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Shipping address deleted."
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "listAccountSubscriptions",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listAccountSubscriptions",
    "access": "public",
    "description": "List an account's subscriptions",
    "lineNumber": 616,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.state",
        "description": "Filter by state.\n  - When `state=active`, `state=canceled`, `state=expired`, or `state=future`, subscriptions with states that match the query and only those subscriptions will be returned.\n  - When `state=in_trial`, only subscriptions that have a trial_started_at date earlier than now and a trial_ends_at date later than now will be returned.\n  - When `state=live`, only subscriptions that are in an active, canceled, or future state or are in trial will be returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<Subscription>"
      ],
      "spread": false,
      "description": "A list of the account's subscriptions."
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "listAccountTransactions",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listAccountTransactions",
    "access": "public",
    "description": "List an account's transactions",
    "lineNumber": 654,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.type",
        "description": "Filter by type field. The value `payment` will return both `purchase` and `capture` transactions."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.success",
        "description": "Filter by success field."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<Transaction>"
      ],
      "spread": false,
      "description": "A list of the account's transactions."
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "listChildAccounts",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listChildAccounts",
    "access": "public",
    "description": "List an account's child accounts",
    "lineNumber": 694,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": "Account ID or code (use prefix: `code-`, e.g. `code-bob`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.subscriber",
        "description": "Filter accounts accounts with or without a subscription in the `active`,\n  `canceled`, or `future` state."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.pastDue",
        "description": "Filter for accounts with an invoice in the `past_due` state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<Account>"
      ],
      "spread": false,
      "description": "A list of an account's child accounts."
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "listAccountAcquisition",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listAccountAcquisition",
    "access": "public",
    "description": "List a site's account acquisition data",
    "lineNumber": 729,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AccountAcquisition>"
      ],
      "spread": false,
      "description": "A list of the site's account acquisition data."
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "listCoupons",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listCoupons",
    "access": "public",
    "description": "List a site's coupons",
    "lineNumber": 764,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<Coupon>"
      ],
      "spread": false,
      "description": "A list of the site's coupons."
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "createCoupon",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#createCoupon",
    "access": "public",
    "description": "Create a new coupon",
    "lineNumber": 776,
    "params": [
      {
        "nullable": null,
        "types": [
          "CouponCreate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {CouponCreate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Coupon>"
      ],
      "spread": false,
      "description": "A new coupon."
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "getCoupon",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getCoupon",
    "access": "public",
    "description": "Fetch a coupon",
    "lineNumber": 788,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "couponId",
        "description": "Coupon ID or code (use prefix: `code-`, e.g. `code-10off`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Coupon>"
      ],
      "spread": false,
      "description": "A coupon."
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "updateCoupon",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#updateCoupon",
    "access": "public",
    "description": "Update an active coupon",
    "lineNumber": 801,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "couponId",
        "description": "Coupon ID or code (use prefix: `code-`, e.g. `code-10off`)."
      },
      {
        "nullable": null,
        "types": [
          "CouponUpdate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {CouponUpdate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Coupon>"
      ],
      "spread": false,
      "description": "The updated coupon."
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "listUniqueCouponCodes",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listUniqueCouponCodes",
    "access": "public",
    "description": "List unique coupon codes associated with a bulk coupon",
    "lineNumber": 837,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "couponId",
        "description": "Coupon ID or code (use prefix: `code-`, e.g. `code-10off`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<UniqueCouponCode>"
      ],
      "spread": false,
      "description": "A list of unique coupon codes that were generated"
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "listCreditPayments",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listCreditPayments",
    "access": "public",
    "description": "List a site's credit payments",
    "lineNumber": 861,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<CreditPayment>"
      ],
      "spread": false,
      "description": "A list of the site's credit payments."
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "getCreditPayment",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getCreditPayment",
    "access": "public",
    "description": "Fetch a credit payment",
    "lineNumber": 873,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "creditPaymentId",
        "description": "Credit Payment ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<CreditPayment>"
      ],
      "spread": false,
      "description": "A credit payment."
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "listCustomFieldDefinitions",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listCustomFieldDefinitions",
    "access": "public",
    "description": "List a site's custom field definitions",
    "lineNumber": 908,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<CustomFieldDefinition>"
      ],
      "spread": false,
      "description": "A list of the site's custom field definitions."
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "getCustomFieldDefinition",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getCustomFieldDefinition",
    "access": "public",
    "description": "Fetch an custom field definition",
    "lineNumber": 920,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "customFieldDefinitionId",
        "description": "Custom Field Definition ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<CustomFieldDefinition>"
      ],
      "spread": false,
      "description": "An custom field definition."
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "listInvoices",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listInvoices",
    "access": "public",
    "description": "List a site's invoices",
    "lineNumber": 961,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.type",
        "description": "Filter by type when:\n  - `type=charge`, only charge invoices will be returned.\n  - `type=credit`, only credit invoices will be returned.\n  - `type=non-legacy`, only charge and credit invoices will be returned.\n  - `type=legacy`, only legacy invoices will be returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<Invoice>"
      ],
      "spread": false,
      "description": "A list of the site's invoices."
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "getInvoice",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getInvoice",
    "access": "public",
    "description": "Fetch an invoice",
    "lineNumber": 973,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "invoiceId",
        "description": "Invoice ID or number (use prefix: `number-`, e.g. `number-1000`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Invoice>"
      ],
      "spread": false,
      "description": "An invoice."
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "putInvoice",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#putInvoice",
    "access": "public",
    "description": "Update an invoice",
    "lineNumber": 986,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "invoiceId",
        "description": "Invoice ID or number (use prefix: `number-`, e.g. `number-1000`)."
      },
      {
        "nullable": null,
        "types": [
          "InvoiceUpdatable"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {InvoiceUpdatable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Invoice>"
      ],
      "spread": false,
      "description": "An invoice."
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "collectInvoice",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#collectInvoice",
    "access": "public",
    "description": "Collect a pending or past due, automatic invoice",
    "lineNumber": 998,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "invoiceId",
        "description": "Invoice ID or number (use prefix: `number-`, e.g. `number-1000`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Invoice>"
      ],
      "spread": false,
      "description": "The updated invoice."
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "failInvoice",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#failInvoice",
    "access": "public",
    "description": "Mark an open invoice as failed",
    "lineNumber": 1010,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "invoiceId",
        "description": "Invoice ID or number (use prefix: `number-`, e.g. `number-1000`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Invoice>"
      ],
      "spread": false,
      "description": "The updated invoice."
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "markInvoiceSuccessful",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#markInvoiceSuccessful",
    "access": "public",
    "description": "Mark an open invoice as successful",
    "lineNumber": 1022,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "invoiceId",
        "description": "Invoice ID or number (use prefix: `number-`, e.g. `number-1000`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Invoice>"
      ],
      "spread": false,
      "description": "The updated invoice."
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "reopenInvoice",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#reopenInvoice",
    "access": "public",
    "description": "Reopen a closed, manual invoice",
    "lineNumber": 1034,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "invoiceId",
        "description": "Invoice ID or number (use prefix: `number-`, e.g. `number-1000`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Invoice>"
      ],
      "spread": false,
      "description": "The updated invoice."
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "listInvoiceLineItems",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listInvoiceLineItems",
    "access": "public",
    "description": "List a invoice's line items",
    "lineNumber": 1073,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "invoiceId",
        "description": "Invoice ID or number (use prefix: `number-`, e.g. `number-1000`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.original",
        "description": "Filter by original field."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.state",
        "description": "Filter by state field."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.type",
        "description": "Filter by type field."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<LineItem>"
      ],
      "spread": false,
      "description": "A list of the invoice's line items."
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "listInvoiceCouponRedemptions",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listInvoiceCouponRedemptions",
    "access": "public",
    "description": "Show the coupon redemptions applied to an invoice",
    "lineNumber": 1097,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "invoiceId",
        "description": "Invoice ID or number (use prefix: `number-`, e.g. `number-1000`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<CouponRedemption>"
      ],
      "spread": false,
      "description": "A list of the the coupon redemptions associated with the invoice."
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "listRelatedInvoices",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listRelatedInvoices",
    "access": "public",
    "description": "List an invoice's related credit or charge invoices",
    "lineNumber": 1109,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "invoiceId",
        "description": "Invoice ID or number (use prefix: `number-`, e.g. `number-1000`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<Invoice>"
      ],
      "spread": false,
      "description": "A list of the credit or charge invoices associated with the invoice."
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "refundInvoice",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#refundInvoice",
    "access": "public",
    "description": "Refund an invoice",
    "lineNumber": 1122,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "invoiceId",
        "description": "Invoice ID or number (use prefix: `number-`, e.g. `number-1000`)."
      },
      {
        "nullable": null,
        "types": [
          "InvoiceRefund"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {InvoiceRefund}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Invoice>"
      ],
      "spread": false,
      "description": "Returns the new credit invoice."
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "listLineItems",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listLineItems",
    "access": "public",
    "description": "List a site's line items",
    "lineNumber": 1160,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.original",
        "description": "Filter by original field."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.state",
        "description": "Filter by state field."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.type",
        "description": "Filter by type field."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<LineItem>"
      ],
      "spread": false,
      "description": "A list of the site's line items."
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "getLineItem",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getLineItem",
    "access": "public",
    "description": "Fetch a line item",
    "lineNumber": 1172,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lineItemId",
        "description": "Line Item ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<LineItem>"
      ],
      "spread": false,
      "description": "A line item."
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "removeLineItem",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#removeLineItem",
    "access": "public",
    "description": "Delete an uninvoiced line item",
    "lineNumber": 1184,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lineItemId",
        "description": "Line Item ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Line item deleted."
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "listPlans",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listPlans",
    "access": "public",
    "description": "List a site's plans",
    "lineNumber": 1220,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.state",
        "description": "Filter by state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<Plan>"
      ],
      "spread": false,
      "description": "A list of plans."
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "createPlan",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#createPlan",
    "access": "public",
    "description": "Create a plan",
    "lineNumber": 1232,
    "params": [
      {
        "nullable": null,
        "types": [
          "PlanCreate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {PlanCreate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Plan>"
      ],
      "spread": false,
      "description": "A plan."
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "getPlan",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getPlan",
    "access": "public",
    "description": "Fetch a plan",
    "lineNumber": 1244,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "planId",
        "description": "Plan ID or code (use prefix: `code-`, e.g. `code-gold`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Plan>"
      ],
      "spread": false,
      "description": "A plan."
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "updatePlan",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#updatePlan",
    "access": "public",
    "description": "Update a plan",
    "lineNumber": 1257,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "planId",
        "description": "Plan ID or code (use prefix: `code-`, e.g. `code-gold`)."
      },
      {
        "nullable": null,
        "types": [
          "PlanUpdate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {PlanUpdate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Plan>"
      ],
      "spread": false,
      "description": "A plan."
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "removePlan",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#removePlan",
    "access": "public",
    "description": "Remove a plan",
    "lineNumber": 1269,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "planId",
        "description": "Plan ID or code (use prefix: `code-`, e.g. `code-gold`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Plan>"
      ],
      "spread": false,
      "description": "Plan deleted"
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "listPlanAddOns",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listPlanAddOns",
    "access": "public",
    "description": "List a plan's add-ons",
    "lineNumber": 1306,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "planId",
        "description": "Plan ID or code (use prefix: `code-`, e.g. `code-gold`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.state",
        "description": "Filter by state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<AddOn>"
      ],
      "spread": false,
      "description": "A list of add-ons."
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "createPlanAddOn",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#createPlanAddOn",
    "access": "public",
    "description": "Create an add-on",
    "lineNumber": 1319,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "planId",
        "description": "Plan ID or code (use prefix: `code-`, e.g. `code-gold`)."
      },
      {
        "nullable": null,
        "types": [
          "AddOnCreate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {AddOnCreate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AddOn>"
      ],
      "spread": false,
      "description": "An add-on."
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "getPlanAddOn",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getPlanAddOn",
    "access": "public",
    "description": "Fetch a plan's add-on",
    "lineNumber": 1332,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "addOnId",
        "description": "Add-on ID or code (use prefix: `code-`, e.g. `code-gold`)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "planId",
        "description": "Plan ID or code (use prefix: `code-`, e.g. `code-gold`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AddOn>"
      ],
      "spread": false,
      "description": "An add-on."
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "updatePlanAddOn",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#updatePlanAddOn",
    "access": "public",
    "description": "Update an add-on",
    "lineNumber": 1346,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "addOnId",
        "description": "Add-on ID or code (use prefix: `code-`, e.g. `code-gold`)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "planId",
        "description": "Plan ID or code (use prefix: `code-`, e.g. `code-gold`)."
      },
      {
        "nullable": null,
        "types": [
          "AddOnUpdate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {AddOnUpdate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AddOn>"
      ],
      "spread": false,
      "description": "An add-on."
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "removePlanAddOn",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#removePlanAddOn",
    "access": "public",
    "description": "Remove an add-on",
    "lineNumber": 1359,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "addOnId",
        "description": "Add-on ID or code (use prefix: `code-`, e.g. `code-gold`)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "planId",
        "description": "Plan ID or code (use prefix: `code-`, e.g. `code-gold`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AddOn>"
      ],
      "spread": false,
      "description": "Add-on deleted"
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "listAddOns",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listAddOns",
    "access": "public",
    "description": "List a site's add-ons",
    "lineNumber": 1395,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.state",
        "description": "Filter by state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<AddOn>"
      ],
      "spread": false,
      "description": "A list of add-ons."
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "getAddOn",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getAddOn",
    "access": "public",
    "description": "Fetch an add-on",
    "lineNumber": 1407,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "addOnId",
        "description": "Add-on ID or code (use prefix: `code-`, e.g. `code-gold`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AddOn>"
      ],
      "spread": false,
      "description": "An add-on."
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "listShippingServices",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listShippingServices",
    "access": "public",
    "description": "List a site's shipping services",
    "lineNumber": 1442,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<ShippingMethod>"
      ],
      "spread": false,
      "description": "A list of the site's shipping services."
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "getShippingService",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getShippingService",
    "access": "public",
    "description": "Fetch a shipping service",
    "lineNumber": 1454,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Shipping Service ID or code (use prefix: `code-`, e.g. `code-usps_2-day`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ShippingMethod>"
      ],
      "spread": false,
      "description": "A shipping_service."
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "listSubscriptions",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listSubscriptions",
    "access": "public",
    "description": "List a site's subscriptions",
    "lineNumber": 1494,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.state",
        "description": "Filter by state.\n  - When `state=active`, `state=canceled`, `state=expired`, or `state=future`, subscriptions with states that match the query and only those subscriptions will be returned.\n  - When `state=in_trial`, only subscriptions that have a trial_started_at date earlier than now and a trial_ends_at date later than now will be returned.\n  - When `state=live`, only subscriptions that are in an active, canceled, or future state or are in trial will be returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<Subscription>"
      ],
      "spread": false,
      "description": "A list of the site's subscriptions."
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "createSubscription",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#createSubscription",
    "access": "public",
    "description": "Create a new subscription",
    "lineNumber": 1506,
    "params": [
      {
        "nullable": null,
        "types": [
          "SubscriptionCreate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {SubscriptionCreate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Subscription>"
      ],
      "spread": false,
      "description": "A subscription."
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "getSubscription",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getSubscription",
    "access": "public",
    "description": "Fetch a subscription",
    "lineNumber": 1518,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Subscription>"
      ],
      "spread": false,
      "description": "A subscription."
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "modifySubscription",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#modifySubscription",
    "access": "public",
    "description": "Modify a subscription",
    "lineNumber": 1531,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      },
      {
        "nullable": null,
        "types": [
          "SubscriptionUpdate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {SubscriptionUpdate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Subscription>"
      ],
      "spread": false,
      "description": "A subscription."
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "terminateSubscription",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#terminateSubscription",
    "access": "public",
    "description": "Terminate a subscription",
    "lineNumber": 1554,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.refund",
        "description": "The type of refund to perform:\n\n  * `full` - Performs a full refund of the last invoice for the current subscription term.\n  * `partial` - Prorates a refund based on the amount of time remaining in the current bill cycle.\n  * `none` - Terminates the subscription without a refund.\n\n  In the event that the most recent invoice is a $0 invoice paid entirely by credit, Recurly will apply the credit back to the customer’s account.\n\n  You may also terminate a subscription with no refund and then manually refund specific invoices."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Subscription>"
      ],
      "spread": false,
      "description": "An expired subscription."
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "cancelSubscription",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#cancelSubscription",
    "access": "public",
    "description": "Cancel a subscription",
    "lineNumber": 1566,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Subscription>"
      ],
      "spread": false,
      "description": "A canceled or failed subscription."
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "reactivateSubscription",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#reactivateSubscription",
    "access": "public",
    "description": "Reactivate a canceled subscription",
    "lineNumber": 1578,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Subscription>"
      ],
      "spread": false,
      "description": "An active subscription."
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "pauseSubscription",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#pauseSubscription",
    "access": "public",
    "description": "Pause subscription",
    "lineNumber": 1591,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      },
      {
        "nullable": null,
        "types": [
          "SubscriptionPause"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {SubscriptionPause}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Subscription>"
      ],
      "spread": false,
      "description": "A subscription."
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "resumeSubscription",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#resumeSubscription",
    "access": "public",
    "description": "Resume subscription",
    "lineNumber": 1603,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Subscription>"
      ],
      "spread": false,
      "description": "A subscription."
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "getSubscriptionChange",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getSubscriptionChange",
    "access": "public",
    "description": "Fetch a subscription's pending change",
    "lineNumber": 1615,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<SubscriptionChange>"
      ],
      "spread": false,
      "description": "A subscription's pending change."
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "createSubscriptionChange",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#createSubscriptionChange",
    "access": "public",
    "description": "Create a new subscription change",
    "lineNumber": 1628,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      },
      {
        "nullable": null,
        "types": [
          "SubscriptionChangeCreate"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The object representing the JSON request to send to the server. It should conform to the schema of {SubscriptionChangeCreate}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<SubscriptionChange>"
      ],
      "spread": false,
      "description": "A subscription change."
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "removeSubscriptionChange",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#removeSubscriptionChange",
    "access": "public",
    "description": "Delete the pending subscription change",
    "lineNumber": 1640,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Subscription change was deleted."
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "listSubscriptionInvoices",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listSubscriptionInvoices",
    "access": "public",
    "description": "List a subscription's invoices",
    "lineNumber": 1682,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.type",
        "description": "Filter by type when:\n  - `type=charge`, only charge invoices will be returned.\n  - `type=credit`, only credit invoices will be returned.\n  - `type=non-legacy`, only charge and credit invoices will be returned.\n  - `type=legacy`, only legacy invoices will be returned."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<Invoice>"
      ],
      "spread": false,
      "description": "A list of the subscription's invoices."
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "listSubscriptionLineItems",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listSubscriptionLineItems",
    "access": "public",
    "description": "List a subscription's line items",
    "lineNumber": 1721,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "Subscription ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.original",
        "description": "Filter by original field."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.state",
        "description": "Filter by state field."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.type",
        "description": "Filter by type field."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<LineItem>"
      ],
      "spread": false,
      "description": "A list of the subscription's line items."
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "listTransactions",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#listTransactions",
    "access": "public",
    "description": "List a site's transactions",
    "lineNumber": 1758,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The optional url parameters for this request."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params.ids",
        "description": "Filter results by their IDs. Up to 200 IDs can be passed at once using\n  commas as separators, e.g. `ids=h1at4d57xlmy,gyqgg0d3v9n1,jrsm5b4yefg6`.\n\n  **Important notes:**\n  * The `ids` parameter cannot be used with any other ordering or filtering\n    parameters (`limit`, `order`, `sort`, `begin_time`, `end_time`, etc)\n  * Invalid or unknown IDs will be ignored, so you should check that the\n    results correspond to your request.\n  * Records are returned in an arbitrary order. Since results are all\n    returned at once you can sort the records yourself."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.limit",
        "description": "Limit number of records 1-200."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.order",
        "description": "Sort order."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.sort",
        "description": "Sort field. You *really* only want to sort by `updated_at` in ascending\n  order. In descending order updated records will move behind the cursor and could\n  prevent some records from being returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.beginTime",
        "description": "Filter by begin_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endTime",
        "description": "Filter by end_time when `sort=created_at` or `sort=updated_at`.\n  **Note:** this value is an ISO8601 timestamp. A partial timestamp that does not include a time zone will default to UTC."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.type",
        "description": "Filter by type field. The value `payment` will return both `purchase` and `capture` transactions."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.success",
        "description": "Filter by success field."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pager<Transaction>"
      ],
      "spread": false,
      "description": "A list of the site's transactions."
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "getTransaction",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getTransaction",
    "access": "public",
    "description": "Fetch a transaction",
    "lineNumber": 1770,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "transactionId",
        "description": "Transaction ID or UUID (use prefix: `uuid-`, e.g. `uuid-123457890`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Transaction>"
      ],
      "spread": false,
      "description": "A transaction."
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "getUniqueCouponCode",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#getUniqueCouponCode",
    "access": "public",
    "description": "Fetch a unique coupon code",
    "lineNumber": 1782,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "uniqueCouponCodeId",
        "description": "Unique Coupon Code ID or code (use prefix: `code-`, e.g. `code-abc-8dh2-def`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<UniqueCouponCode>"
      ],
      "spread": false,
      "description": "A unique coupon code."
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "deactivateUniqueCouponCode",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#deactivateUniqueCouponCode",
    "access": "public",
    "description": "Deactivate a unique coupon code",
    "lineNumber": 1794,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "uniqueCouponCodeId",
        "description": "Unique Coupon Code ID or code (use prefix: `code-`, e.g. `code-abc-8dh2-def`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<UniqueCouponCode>"
      ],
      "spread": false,
      "description": "A unique coupon code."
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "reactivateUniqueCouponCode",
    "memberof": "lib/recurly/Client.js~Client",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/recurly/Client.js~Client#reactivateUniqueCouponCode",
    "access": "public",
    "description": "Restore a unique coupon code",
    "lineNumber": 1806,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "uniqueCouponCodeId",
        "description": "Unique Coupon Code ID or code (use prefix: `code-`, e.g. `code-abc-8dh2-def`)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<UniqueCouponCode>"
      ],
      "spread": false,
      "description": "A unique coupon code."
    }
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "lib/recurly/resources/Account.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * Account\n * @typedef {Object} Account\n * @prop {Address} address\n * @prop {string} billTo - An enumerable describing the billing behavior of the account, specifically whether the account is self-paying or will rely on the parent account to pay.\n * @prop {BillingInfo} billingInfo\n * @prop {string} ccEmails - Additional email address that should receive account correspondence. These should be separated only by commas. These CC emails will receive all emails that the `email` field also receives.\n * @prop {string} code - The unique identifier of the account. This cannot be changed once the account is created.\n * @prop {string} company\n * @prop {datetime} createdAt - When the account was created.\n * @prop {Array.<CustomField>} customFields\n * @prop {datetime} deletedAt - If present, when the account was last marked inactive.\n * @prop {string} email - The email address used for communicating with this customer. The customer will also use this email address to log into your hosted account management pages. This value does not need to be unique.\n * @prop {string} exemptionCertificate - The tax exemption certificate number for the account. If the merchant has an integration for the Vertex tax provider, this optional value will be sent in any tax calculation requests for the account.\n * @prop {string} firstName\n * @prop {string} hostedLoginToken - The unique token for automatically logging the account in to the hosted management pages. You may automatically log the user into their hosted management pages by directing the user to: `https://{subdomain}.recurly.com/account/{hosted_login_token}`.\n * @prop {string} id\n * @prop {string} lastName\n * @prop {string} parentAccountId - The UUID of the parent account associated with this account.\n * @prop {string} preferredLocale - Used to determine the language and locale of emails sent on behalf of the merchant to the customer.\n * @prop {Array.<ShippingAddress>} shippingAddresses - The shipping addresses on the account.\n * @prop {string} state - Accounts can be either active or inactive.\n * @prop {boolean} taxExempt - The tax status of the account. `true` exempts tax on the account, `false` applies tax on the account.\n * @prop {datetime} updatedAt - When the account was last changed.\n * @prop {string} username - A secondary value for the account.\n * @prop {string} vatNumber - The VAT number of the account (to avoid having the VAT applied). This is only used for manually collected invoices.\n */\nclass Account {}\n\nmodule.exports = Account\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/Account.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "typedef",
    "name": "Account",
    "memberof": "lib/recurly/resources/Account.js",
    "static": true,
    "longname": "lib/recurly/resources/Account.js~Account",
    "access": "public",
    "description": "Account",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{Address} address"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} billTo - An enumerable describing the billing behavior of the account, specifically whether the account is self-paying or will rely on the parent account to pay."
      },
      {
        "tagName": "@prop",
        "tagValue": "{BillingInfo} billingInfo"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} ccEmails - Additional email address that should receive account correspondence. These should be separated only by commas. These CC emails will receive all emails that the `email` field also receives."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} code - The unique identifier of the account. This cannot be changed once the account is created."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} company"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - When the account was created."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<CustomField>} customFields"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} deletedAt - If present, when the account was last marked inactive."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} email - The email address used for communicating with this customer. The customer will also use this email address to log into your hosted account management pages. This value does not need to be unique."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} exemptionCertificate - The tax exemption certificate number for the account. If the merchant has an integration for the Vertex tax provider, this optional value will be sent in any tax calculation requests for the account."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} firstName"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} hostedLoginToken - The unique token for automatically logging the account in to the hosted management pages. You may automatically log the user into their hosted management pages by directing the user to: `https://{subdomain}.recurly.com/account/{hosted_login_token}`."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} lastName"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} parentAccountId - The UUID of the parent account associated with this account."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} preferredLocale - Used to determine the language and locale of emails sent on behalf of the merchant to the customer."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<ShippingAddress>} shippingAddresses - The shipping addresses on the account."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} state - Accounts can be either active or inactive."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} taxExempt - The tax status of the account. `true` exempts tax on the account, `false` applies tax on the account."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - When the account was last changed."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} username - A secondary value for the account."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} vatNumber - The VAT number of the account (to avoid having the VAT applied). This is only used for manually collected invoices."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Account"
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "lib/recurly/resources/AccountAcquisition.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * AccountAcquisition\n * @typedef {Object} AccountAcquisition\n * @prop {AccountMini} account\n * @prop {string} campaign - An arbitrary identifier for the marketing campaign that led to the acquisition of this account.\n * @prop {string} channel - The channel through which the account was acquired.\n * @prop {Object} cost - Account balance\n * @prop {datetime} createdAt - When the account acquisition data was created.\n * @prop {string} id\n * @prop {string} subchannel - An arbitrary subchannel string representing a distinction/subcategory within a broader channel.\n * @prop {datetime} updatedAt - When the account acquisition data was last changed.\n */\nclass AccountAcquisition {}\n\nmodule.exports = AccountAcquisition\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/AccountAcquisition.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "typedef",
    "name": "AccountAcquisition",
    "memberof": "lib/recurly/resources/AccountAcquisition.js",
    "static": true,
    "longname": "lib/recurly/resources/AccountAcquisition.js~AccountAcquisition",
    "access": "public",
    "description": "AccountAcquisition",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{AccountMini} account"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} campaign - An arbitrary identifier for the marketing campaign that led to the acquisition of this account."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} channel - The channel through which the account was acquired."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} cost - Account balance"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - When the account acquisition data was created."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} subchannel - An arbitrary subchannel string representing a distinction/subcategory within a broader channel."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - When the account acquisition data was last changed."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AccountAcquisition"
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "lib/recurly/resources/AccountBalance.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * AccountBalance\n * @typedef {Object} AccountBalance\n * @prop {AccountMini} account\n * @prop {Object} balances - Account balance\n * @prop {boolean} pastDue\n */\nclass AccountBalance {}\n\nmodule.exports = AccountBalance\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/AccountBalance.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "typedef",
    "name": "AccountBalance",
    "memberof": "lib/recurly/resources/AccountBalance.js",
    "static": true,
    "longname": "lib/recurly/resources/AccountBalance.js~AccountBalance",
    "access": "public",
    "description": "AccountBalance",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{AccountMini} account"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} balances - Account balance"
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} pastDue"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AccountBalance"
    }
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "lib/recurly/resources/AccountMini.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * AccountMini\n * @typedef {Object} AccountMini\n * @prop {string} billTo\n * @prop {string} code - The unique identifier of the account.\n * @prop {string} company\n * @prop {string} email - The email address used for communicating with this customer.\n * @prop {string} firstName\n * @prop {string} id\n * @prop {string} lastName\n * @prop {string} parentAccountId\n */\nclass AccountMini {}\n\nmodule.exports = AccountMini\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/AccountMini.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "typedef",
    "name": "AccountMini",
    "memberof": "lib/recurly/resources/AccountMini.js",
    "static": true,
    "longname": "lib/recurly/resources/AccountMini.js~AccountMini",
    "access": "public",
    "description": "AccountMini",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} billTo"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} code - The unique identifier of the account."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} company"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} email - The email address used for communicating with this customer."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} firstName"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} lastName"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} parentAccountId"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AccountMini"
    }
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "lib/recurly/resources/AccountNote.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * AccountNote\n * @typedef {Object} AccountNote\n * @prop {string} accountId\n * @prop {datetime} createdAt\n * @prop {string} id\n * @prop {string} message\n * @prop {User} user\n */\nclass AccountNote {}\n\nmodule.exports = AccountNote\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/AccountNote.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "typedef",
    "name": "AccountNote",
    "memberof": "lib/recurly/resources/AccountNote.js",
    "static": true,
    "longname": "lib/recurly/resources/AccountNote.js~AccountNote",
    "access": "public",
    "description": "AccountNote",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} accountId"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} message"
      },
      {
        "tagName": "@prop",
        "tagValue": "{User} user"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AccountNote"
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "lib/recurly/resources/AddOn.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * AddOn\n * @typedef {Object} AddOn\n * @prop {string} accountingCode - Accounting code for invoice line items for this add-on. If no value is provided, it defaults to add-on's code.\n * @prop {string} code - The unique identifier for the add-on within its plan.\n * @prop {datetime} createdAt - Created at\n * @prop {Array.<AddOnPricing>} currencies - Add-on pricing\n * @prop {number} defaultQuantity - Default quantity for the hosted pages.\n * @prop {datetime} deletedAt - Deleted at\n * @prop {boolean} displayQuantity - Determines if the quantity field is displayed on the hosted pages for the add-on.\n * @prop {string} id - Add-on ID\n * @prop {string} name - Describes your add-on and will appear in subscribers' invoices.\n * @prop {string} planId - Plan ID\n * @prop {string} state - Add-ons can be either active or inactive.\n * @prop {string} taxCode - Optional field for EU VAT merchants and Avalara AvaTax Pro merchants. If you are using Recurly's EU VAT feature, you can use values of 'unknown', 'physical', or 'digital'. If you have your own AvaTax account configured, you can use Avalara tax codes to assign custom tax rules.\n * @prop {datetime} updatedAt - Last updated at\n */\nclass AddOn {}\n\nmodule.exports = AddOn\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/AddOn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "typedef",
    "name": "AddOn",
    "memberof": "lib/recurly/resources/AddOn.js",
    "static": true,
    "longname": "lib/recurly/resources/AddOn.js~AddOn",
    "access": "public",
    "description": "AddOn",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} accountingCode - Accounting code for invoice line items for this add-on. If no value is provided, it defaults to add-on's code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} code - The unique identifier for the add-on within its plan."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<AddOnPricing>} currencies - Add-on pricing"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} defaultQuantity - Default quantity for the hosted pages."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} deletedAt - Deleted at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} displayQuantity - Determines if the quantity field is displayed on the hosted pages for the add-on."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Add-on ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} name - Describes your add-on and will appear in subscribers' invoices."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} planId - Plan ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} state - Add-ons can be either active or inactive."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} taxCode - Optional field for EU VAT merchants and Avalara AvaTax Pro merchants. If you are using Recurly's EU VAT feature, you can use values of 'unknown', 'physical', or 'digital'. If you have your own AvaTax account configured, you can use Avalara tax codes to assign custom tax rules."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Last updated at"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AddOn"
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "lib/recurly/resources/AddOnMini.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * AddOnMini\n * @typedef {Object} AddOnMini\n * @prop {string} accountingCode - Accounting code for invoice line items for this add-on. If no value is provided, it defaults to add-on's code.\n * @prop {string} code - The unique identifier for the add-on within its plan.\n * @prop {string} id - Add-on ID\n * @prop {string} name - Describes your add-on and will appear in subscribers' invoices.\n */\nclass AddOnMini {}\n\nmodule.exports = AddOnMini\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/AddOnMini.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "typedef",
    "name": "AddOnMini",
    "memberof": "lib/recurly/resources/AddOnMini.js",
    "static": true,
    "longname": "lib/recurly/resources/AddOnMini.js~AddOnMini",
    "access": "public",
    "description": "AddOnMini",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} accountingCode - Accounting code for invoice line items for this add-on. If no value is provided, it defaults to add-on's code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} code - The unique identifier for the add-on within its plan."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Add-on ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} name - Describes your add-on and will appear in subscribers' invoices."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AddOnMini"
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "lib/recurly/resources/AddOnPricing.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * AddOnPricing\n * @typedef {Object} AddOnPricing\n * @prop {string} currency - 3-letter ISO 4217 currency code.\n * @prop {number} unitAmount - Unit price\n */\nclass AddOnPricing {}\n\nmodule.exports = AddOnPricing\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/AddOnPricing.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "typedef",
    "name": "AddOnPricing",
    "memberof": "lib/recurly/resources/AddOnPricing.js",
    "static": true,
    "longname": "lib/recurly/resources/AddOnPricing.js~AddOnPricing",
    "access": "public",
    "description": "AddOnPricing",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} currency - 3-letter ISO 4217 currency code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} unitAmount - Unit price"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AddOnPricing"
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "lib/recurly/resources/Address.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * Address\n * @typedef {Object} Address\n * @prop {string} city - City\n * @prop {string} country - Country, 2-letter ISO code.\n * @prop {string} firstName - First name\n * @prop {string} lastName - Last name\n * @prop {string} phone - Phone number\n * @prop {string} postalCode - Zip or postal code.\n * @prop {string} region - State or province.\n * @prop {string} street1 - Street 1\n * @prop {string} street2 - Street 2\n */\nclass Address {}\n\nmodule.exports = Address\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/Address.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "typedef",
    "name": "Address",
    "memberof": "lib/recurly/resources/Address.js",
    "static": true,
    "longname": "lib/recurly/resources/Address.js~Address",
    "access": "public",
    "description": "Address",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} city - City"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} country - Country, 2-letter ISO code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} firstName - First name"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} lastName - Last name"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} phone - Phone number"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} postalCode - Zip or postal code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} region - State or province."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} street1 - Street 1"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} street2 - Street 2"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Address"
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "lib/recurly/resources/BillingInfo.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * BillingInfo\n * @typedef {Object} BillingInfo\n * @prop {string} accountId\n * @prop {Address} address\n * @prop {string} company\n * @prop {datetime} createdAt - When the billing information was created.\n * @prop {string} firstName\n * @prop {Object} fraud - Most recent fraud result.\n * @prop {string} id\n * @prop {string} lastName\n * @prop {Object} paymentMethod\n * @prop {datetime} updatedAt - When the billing information was last changed.\n * @prop {Object} updatedBy\n * @prop {boolean} valid\n * @prop {string} vatNumber - Customer's VAT number (to avoid having the VAT applied). This is only used for automatically collected invoices.\n */\nclass BillingInfo {}\n\nmodule.exports = BillingInfo\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/BillingInfo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "typedef",
    "name": "BillingInfo",
    "memberof": "lib/recurly/resources/BillingInfo.js",
    "static": true,
    "longname": "lib/recurly/resources/BillingInfo.js~BillingInfo",
    "access": "public",
    "description": "BillingInfo",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} accountId"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Address} address"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} company"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - When the billing information was created."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} firstName"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} fraud - Most recent fraud result."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} lastName"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} paymentMethod"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - When the billing information was last changed."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} updatedBy"
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} valid"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} vatNumber - Customer's VAT number (to avoid having the VAT applied). This is only used for automatically collected invoices."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "BillingInfo"
    }
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "lib/recurly/resources/Coupon.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * Coupon\n * @typedef {Object} Coupon\n * @prop {boolean} appliesToAllPlans - The coupon is valid for all plans if true. If false then `plans` and `plans_names` will list the applicable plans.\n * @prop {boolean} appliesToNonPlanCharges - The coupon is valid for one-time, non-plan charges if true.\n * @prop {string} code - The code the customer enters to redeem the coupon.\n * @prop {string} couponType - Whether the coupon is \"single_code\" or \"bulk\". Bulk coupons will require a `unique_code_template` and will generate unique codes through the `/generate` endpoint.\n * @prop {datetime} createdAt - Created at\n * @prop {CouponDiscount} discount\n * @prop {string} duration - - \"single_use\" coupons applies to the first invoice only. - \"temporal\" coupons will apply to invoices for the duration determined by the `temporal_unit` and `temporal_amount` attributes.\n * @prop {datetime} expiredAt - The date and time the coupon was expired early or reached its `max_redemptions`.\n * @prop {number} freeTrialAmount - Sets the duration of time the `free_trial_unit` is for.\n * @prop {string} freeTrialUnit - Description of the unit of time the coupon is for. Used with `free_trial_amount` to determine the duration of time the coupon is for.\n * @prop {string} hostedPageDescription - This description will show up when a customer redeems a coupon on your Hosted Payment Pages, or if you choose to show the description on your own checkout page.\n * @prop {string} id - Coupon ID\n * @prop {string} invoiceDescription - Description of the coupon on the invoice.\n * @prop {number} maxRedemptions - A maximum number of redemptions for the coupon. The coupon will expire when it hits its maximum redemptions.\n * @prop {number} maxRedemptionsPerAccount - Redemptions per account is the number of times a specific account can redeem the coupon. Set redemptions per account to `1` if you want to keep customers from gaming the system and getting more than one discount from the coupon campaign.\n * @prop {string} name - The internal name for the coupon.\n * @prop {Array.<PlanMini>} plans - Plans\n * @prop {Array.<string>} plansNames - TODO\n * @prop {datetime} redeemBy - The date and time the coupon will expire and can no longer be redeemed. Time is always 11:59:59, the end-of-day Pacific time.\n * @prop {string} redemptionResource - Whether the discount is for all eligible charges on the account, or only a specific subscription.\n * @prop {string} state - Indicates if the coupon is redeemable, and if it is not, why.\n * @prop {number} temporalAmount - If `duration` is \"temporal\" than `temporal_amount` is an integer which is multiplied by `temporal_unit` to define the duration that the coupon will be applied to invoices for.\n * @prop {string} temporalUnit - If `duration` is \"temporal\" than `temporal_unit` is multiplied by `temporal_amount` to define the duration that the coupon will be applied to invoices for.\n * @prop {number} uniqueCouponCodesCount - When this number reaches `max_redemptions` the coupon will no longer be redeemable.\n * @prop {datetime} updatedAt - Last updated at\n */\nclass Coupon {}\n\nmodule.exports = Coupon\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/Coupon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "typedef",
    "name": "Coupon",
    "memberof": "lib/recurly/resources/Coupon.js",
    "static": true,
    "longname": "lib/recurly/resources/Coupon.js~Coupon",
    "access": "public",
    "description": "Coupon",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{boolean} appliesToAllPlans - The coupon is valid for all plans if true. If false then `plans` and `plans_names` will list the applicable plans."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} appliesToNonPlanCharges - The coupon is valid for one-time, non-plan charges if true."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} code - The code the customer enters to redeem the coupon."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} couponType - Whether the coupon is \"single_code\" or \"bulk\". Bulk coupons will require a `unique_code_template` and will generate unique codes through the `/generate` endpoint."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{CouponDiscount} discount"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} duration - - \"single_use\" coupons applies to the first invoice only. - \"temporal\" coupons will apply to invoices for the duration determined by the `temporal_unit` and `temporal_amount` attributes."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} expiredAt - The date and time the coupon was expired early or reached its `max_redemptions`."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} freeTrialAmount - Sets the duration of time the `free_trial_unit` is for."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} freeTrialUnit - Description of the unit of time the coupon is for. Used with `free_trial_amount` to determine the duration of time the coupon is for."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} hostedPageDescription - This description will show up when a customer redeems a coupon on your Hosted Payment Pages, or if you choose to show the description on your own checkout page."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Coupon ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} invoiceDescription - Description of the coupon on the invoice."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} maxRedemptions - A maximum number of redemptions for the coupon. The coupon will expire when it hits its maximum redemptions."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} maxRedemptionsPerAccount - Redemptions per account is the number of times a specific account can redeem the coupon. Set redemptions per account to `1` if you want to keep customers from gaming the system and getting more than one discount from the coupon campaign."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} name - The internal name for the coupon."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<PlanMini>} plans - Plans"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<string>} plansNames - TODO"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} redeemBy - The date and time the coupon will expire and can no longer be redeemed. Time is always 11:59:59, the end-of-day Pacific time."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} redemptionResource - Whether the discount is for all eligible charges on the account, or only a specific subscription."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} state - Indicates if the coupon is redeemable, and if it is not, why."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} temporalAmount - If `duration` is \"temporal\" than `temporal_amount` is an integer which is multiplied by `temporal_unit` to define the duration that the coupon will be applied to invoices for."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} temporalUnit - If `duration` is \"temporal\" than `temporal_unit` is multiplied by `temporal_amount` to define the duration that the coupon will be applied to invoices for."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} uniqueCouponCodesCount - When this number reaches `max_redemptions` the coupon will no longer be redeemable."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Last updated at"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Coupon"
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "lib/recurly/resources/CouponDiscount.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * CouponDiscount\n * @typedef {Object} CouponDiscount\n * @prop {Array.<CouponDiscountPricing>} currencies - This is only present when `type=fixed`.\n * @prop {number} percent - This is only present when `type=percent`.\n * @prop {Object} trial - This is only present when `type=free_trial`.\n * @prop {string} type\n */\nclass CouponDiscount {}\n\nmodule.exports = CouponDiscount\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/CouponDiscount.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "typedef",
    "name": "CouponDiscount",
    "memberof": "lib/recurly/resources/CouponDiscount.js",
    "static": true,
    "longname": "lib/recurly/resources/CouponDiscount.js~CouponDiscount",
    "access": "public",
    "description": "CouponDiscount",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{Array.<CouponDiscountPricing>} currencies - This is only present when `type=fixed`."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} percent - This is only present when `type=percent`."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} trial - This is only present when `type=free_trial`."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} type"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CouponDiscount"
    }
  },
  {
    "__docId__": 192,
    "kind": "file",
    "name": "lib/recurly/resources/CouponDiscountPricing.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * CouponDiscountPricing\n * @typedef {Object} CouponDiscountPricing\n * @prop {number} amount - Value of the fixed discount that this coupon applies.\n * @prop {string} currency - 3-letter ISO 4217 currency code.\n */\nclass CouponDiscountPricing {}\n\nmodule.exports = CouponDiscountPricing\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/CouponDiscountPricing.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 193,
    "kind": "typedef",
    "name": "CouponDiscountPricing",
    "memberof": "lib/recurly/resources/CouponDiscountPricing.js",
    "static": true,
    "longname": "lib/recurly/resources/CouponDiscountPricing.js~CouponDiscountPricing",
    "access": "public",
    "description": "CouponDiscountPricing",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{number} amount - Value of the fixed discount that this coupon applies."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} currency - 3-letter ISO 4217 currency code."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CouponDiscountPricing"
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "lib/recurly/resources/CouponMini.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * CouponMini\n * @typedef {Object} CouponMini\n * @prop {string} code - The code the customer enters to redeem the coupon.\n * @prop {string} couponType - Whether the coupon is \"single_code\" or \"bulk\". Bulk coupons will require a `unique_code_template` and will generate unique codes through the `/generate` endpoint.\n * @prop {CouponDiscount} discount\n * @prop {datetime} expiredAt - The date and time the coupon was expired early or reached its `max_redemptions`.\n * @prop {string} id - Coupon ID\n * @prop {string} name - The internal name for the coupon.\n * @prop {string} state - Indicates if the coupon is redeemable, and if it is not, why.\n */\nclass CouponMini {}\n\nmodule.exports = CouponMini\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/CouponMini.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "typedef",
    "name": "CouponMini",
    "memberof": "lib/recurly/resources/CouponMini.js",
    "static": true,
    "longname": "lib/recurly/resources/CouponMini.js~CouponMini",
    "access": "public",
    "description": "CouponMini",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} code - The code the customer enters to redeem the coupon."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} couponType - Whether the coupon is \"single_code\" or \"bulk\". Bulk coupons will require a `unique_code_template` and will generate unique codes through the `/generate` endpoint."
      },
      {
        "tagName": "@prop",
        "tagValue": "{CouponDiscount} discount"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} expiredAt - The date and time the coupon was expired early or reached its `max_redemptions`."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Coupon ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} name - The internal name for the coupon."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} state - Indicates if the coupon is redeemable, and if it is not, why."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CouponMini"
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "lib/recurly/resources/CouponRedemption.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * CouponRedemption\n * @typedef {Object} CouponRedemption\n * @prop {string} accountId - The Account ID on which the coupon was applied.\n * @prop {Coupon} coupon\n * @prop {datetime} createdAt - Created at\n * @prop {string} currency - 3-letter ISO 4217 currency code.\n * @prop {string} discounted - The amount that was discounted upon the application of the coupon, formatted with the currency.\n * @prop {string} id - Coupon Redemption ID\n * @prop {datetime} removedAt - The date and time the redemption was removed from the account (un-redeemed).\n * @prop {string} state - Coupon Redemption state\n * @prop {datetime} updatedAt - Last updated at\n */\nclass CouponRedemption {}\n\nmodule.exports = CouponRedemption\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/CouponRedemption.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "typedef",
    "name": "CouponRedemption",
    "memberof": "lib/recurly/resources/CouponRedemption.js",
    "static": true,
    "longname": "lib/recurly/resources/CouponRedemption.js~CouponRedemption",
    "access": "public",
    "description": "CouponRedemption",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} accountId - The Account ID on which the coupon was applied."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Coupon} coupon"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} currency - 3-letter ISO 4217 currency code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} discounted - The amount that was discounted upon the application of the coupon, formatted with the currency."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Coupon Redemption ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} removedAt - The date and time the redemption was removed from the account (un-redeemed)."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} state - Coupon Redemption state"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Last updated at"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CouponRedemption"
    }
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "lib/recurly/resources/CouponRedemptionMini.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * CouponRedemptionMini\n * @typedef {Object} CouponRedemptionMini\n * @prop {CouponMini} coupon\n * @prop {datetime} createdAt - Created at\n * @prop {string} discounted - The amount that was discounted upon the application of the coupon, formatted with the currency.\n * @prop {string} id - Coupon Redemption ID\n * @prop {string} state - Invoice state\n */\nclass CouponRedemptionMini {}\n\nmodule.exports = CouponRedemptionMini\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/CouponRedemptionMini.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "typedef",
    "name": "CouponRedemptionMini",
    "memberof": "lib/recurly/resources/CouponRedemptionMini.js",
    "static": true,
    "longname": "lib/recurly/resources/CouponRedemptionMini.js~CouponRedemptionMini",
    "access": "public",
    "description": "CouponRedemptionMini",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{CouponMini} coupon"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} discounted - The amount that was discounted upon the application of the coupon, formatted with the currency."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Coupon Redemption ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} state - Invoice state"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CouponRedemptionMini"
    }
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "lib/recurly/resources/CreditPayment.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * CreditPayment\n * @typedef {Object} CreditPayment\n * @prop {AccountMini} account\n * @prop {string} action - The action for which the credit was created.\n * @prop {number} amount - Total credit payment amount applied to the charge invoice.\n * @prop {InvoiceMini} appliedToInvoice\n * @prop {datetime} createdAt - Created at\n * @prop {string} currency - 3-letter ISO 4217 currency code.\n * @prop {string} id - Credit Payment ID\n * @prop {string} originalCreditPaymentId - For credit payments with action `refund`, this is the credit payment that was refunded.\n * @prop {InvoiceMini} originalInvoice\n * @prop {Transaction} refundTransaction\n * @prop {datetime} updatedAt - Last updated at\n * @prop {string} uuid - The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI.\n * @prop {datetime} voidedAt - Voided at\n */\nclass CreditPayment {}\n\nmodule.exports = CreditPayment\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/CreditPayment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "typedef",
    "name": "CreditPayment",
    "memberof": "lib/recurly/resources/CreditPayment.js",
    "static": true,
    "longname": "lib/recurly/resources/CreditPayment.js~CreditPayment",
    "access": "public",
    "description": "CreditPayment",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{AccountMini} account"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} action - The action for which the credit was created."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} amount - Total credit payment amount applied to the charge invoice."
      },
      {
        "tagName": "@prop",
        "tagValue": "{InvoiceMini} appliedToInvoice"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} currency - 3-letter ISO 4217 currency code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Credit Payment ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} originalCreditPaymentId - For credit payments with action `refund`, this is the credit payment that was refunded."
      },
      {
        "tagName": "@prop",
        "tagValue": "{InvoiceMini} originalInvoice"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Transaction} refundTransaction"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Last updated at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} uuid - The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} voidedAt - Voided at"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CreditPayment"
    }
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "lib/recurly/resources/CustomField.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * CustomField\n * @typedef {Object} CustomField\n * @prop {string} name - Fields must be created in the UI before values can be assigned to them.\n * @prop {string} value - Any values that resemble a credit card number or security code (CVV/CVC) will be rejected.\n */\nclass CustomField {}\n\nmodule.exports = CustomField\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/CustomField.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "typedef",
    "name": "CustomField",
    "memberof": "lib/recurly/resources/CustomField.js",
    "static": true,
    "longname": "lib/recurly/resources/CustomField.js~CustomField",
    "access": "public",
    "description": "CustomField",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} name - Fields must be created in the UI before values can be assigned to them."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} value - Any values that resemble a credit card number or security code (CVV/CVC) will be rejected."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CustomField"
    }
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "lib/recurly/resources/CustomFieldDefinition.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * CustomFieldDefinition\n * @typedef {Object} CustomFieldDefinition\n * @prop {datetime} createdAt - Created at\n * @prop {datetime} deletedAt - Definitions are initially soft deleted, and once all the values are removed from the accouts or subscriptions, will be hard deleted an no longer visible.\n * @prop {string} displayName - Used to label the field when viewing and editing the field in Recurly's admin UI.\n * @prop {string} id - Custom field definition ID\n * @prop {string} name - Used by the API to identify the field or reading and writing. The name can only be used once per Recurly object type.\n * @prop {string} relatedType - Related Recurly object type\n * @prop {string} tooltip - Displayed as a tooltip when editing the field in the Recurly admin UI.\n * @prop {datetime} updatedAt - Last updated at\n * @prop {string} userAccess - The access control applied inside Recurly's admin UI: - `api_only` - No one will be able to view or edit this field's data via the admin UI. - `read_only` - Users with the Customers role will be able to view this field's data via the admin UI, but   editing will only be available via the API. - `write` - Users with the Customers role will be able to view and edit this field's data via the admin UI.\n */\nclass CustomFieldDefinition {}\n\nmodule.exports = CustomFieldDefinition\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/CustomFieldDefinition.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "typedef",
    "name": "CustomFieldDefinition",
    "memberof": "lib/recurly/resources/CustomFieldDefinition.js",
    "static": true,
    "longname": "lib/recurly/resources/CustomFieldDefinition.js~CustomFieldDefinition",
    "access": "public",
    "description": "CustomFieldDefinition",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} deletedAt - Definitions are initially soft deleted, and once all the values are removed from the accouts or subscriptions, will be hard deleted an no longer visible."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} displayName - Used to label the field when viewing and editing the field in Recurly's admin UI."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Custom field definition ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} name - Used by the API to identify the field or reading and writing. The name can only be used once per Recurly object type."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} relatedType - Related Recurly object type"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} tooltip - Displayed as a tooltip when editing the field in the Recurly admin UI."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Last updated at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} userAccess - The access control applied inside Recurly's admin UI: - `api_only` - No one will be able to view or edit this field's data via the admin UI. - `read_only` - Users with the Customers role will be able to view this field's data via the admin UI, but   editing will only be available via the API. - `write` - Users with the Customers role will be able to view and edit this field's data via the admin UI."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CustomFieldDefinition"
    }
  },
  {
    "__docId__": 206,
    "kind": "file",
    "name": "lib/recurly/resources/Error.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * Error\n * @typedef {Object} Error\n * @prop {string} message - Message\n * @prop {Array.<Object>} params - Parameter specific errors\n * @prop {string} type - Type\n */\nclass Error {}\n\nmodule.exports = Error\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/Error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "typedef",
    "name": "Error",
    "memberof": "lib/recurly/resources/Error.js",
    "static": true,
    "longname": "lib/recurly/resources/Error.js~Error",
    "access": "public",
    "description": "Error",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} message - Message"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<Object>} params - Parameter specific errors"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} type - Type"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Error"
    }
  },
  {
    "__docId__": 208,
    "kind": "file",
    "name": "lib/recurly/resources/ErrorMayHaveTransaction.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * ErrorMayHaveTransaction\n * @typedef {Object} ErrorMayHaveTransaction\n * @prop {string} message - Message\n * @prop {Array.<Object>} params - Parameter specific errors\n * @prop {Object} transactionError - This is only included on errors with `type=transaction`.\n * @prop {string} type - Type\n */\nclass ErrorMayHaveTransaction {}\n\nmodule.exports = ErrorMayHaveTransaction\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/ErrorMayHaveTransaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 209,
    "kind": "typedef",
    "name": "ErrorMayHaveTransaction",
    "memberof": "lib/recurly/resources/ErrorMayHaveTransaction.js",
    "static": true,
    "longname": "lib/recurly/resources/ErrorMayHaveTransaction.js~ErrorMayHaveTransaction",
    "access": "public",
    "description": "ErrorMayHaveTransaction",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} message - Message"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<Object>} params - Parameter specific errors"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} transactionError - This is only included on errors with `type=transaction`."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} type - Type"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ErrorMayHaveTransaction"
    }
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "lib/recurly/resources/Invoice.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * Invoice\n * @typedef {Object} Invoice\n * @prop {AccountMini} account\n * @prop {InvoiceAddress} address\n * @prop {number} balance - The outstanding balance remaining on this invoice.\n * @prop {datetime} closedAt - Date invoice was marked paid or failed.\n * @prop {string} collectionMethod - An automatic invoice means a corresponding transaction is run using the account's billing information at the same time the invoice is created. Manual invoices are created without a corresponding transaction. The merchant must enter a manual payment transaction or have the customer pay the invoice with an automatic method, like credit card, PayPal, Amazon, or ACH bank payment.\n * @prop {datetime} createdAt - Created at\n * @prop {Array.<CreditPayment>} creditPayments - Credit payments\n * @prop {string} currency - 3-letter ISO 4217 currency code.\n * @prop {string} customerNotes - This will default to the Customer Notes text specified on the Invoice Settings. Specify custom notes to add or override Customer Notes.\n * @prop {number} discount - Total discounts applied to this invoice.\n * @prop {datetime} dueAt - Date invoice is due. This is the date the net terms are reached.\n * @prop {string} id - Invoice ID\n * @prop {LineItemList} lineItems\n * @prop {number} netTerms - Integer representing the number of days after an invoice's creation that the invoice will become past due. If an invoice's net terms are set to '0', it is due 'On Receipt' and will become past due 24 hours after it’s created. If an invoice is due net 30, it will become past due at 31 days exactly.\n * @prop {string} number - If VAT taxation and the Country Invoice Sequencing feature are enabled, invoices will have country-specific invoice numbers for invoices billed to EU countries (ex: FR1001). Non-EU invoices will continue to use the site-level invoice number sequence.\n * @prop {string} origin - The event that created the invoice.\n * @prop {number} paid - The total amount of successful payments transaction on this invoice.\n * @prop {string} poNumber - For manual invoicing, this identifies the PO number associated with the subscription.\n * @prop {string} previousInvoiceId - On refund invoices, this value will exist and show the invoice ID of the purchase invoice the refund was created from.\n * @prop {number} refundableAmount - The refundable amount on a charge invoice. It will be null for all other invoices.\n * @prop {ShippingAddress} shippingAddress\n * @prop {string} state - Invoice state\n * @prop {Array.<string>} subscriptionIds - If the invoice is charging or refunding for one or more subscriptions, these are their IDs.\n * @prop {number} subtotal - The summation of charges, discounts, and credits, before tax.\n * @prop {number} tax - The total tax on this invoice.\n * @prop {TaxInfo} taxInfo\n * @prop {string} termsAndConditions - This will default to the Terms and Conditions text specified on the Invoice Settings page in your Recurly admin. Specify custom notes to add or override Terms and Conditions.\n * @prop {number} total - The final total on this invoice. The summation of invoice charges, discounts, credits, and tax.\n * @prop {Array.<Transaction>} transactions - Transactions\n * @prop {string} type - Invoices are either charge, credit, or legacy invoices.\n * @prop {datetime} updatedAt - Last updated at\n * @prop {string} vatNumber - VAT registration number for the customer on this invoice. This will come from the VAT Number field in the Billing Info or the Account Info depending on your tax settings and the invoice collection method.\n * @prop {string} vatReverseChargeNotes - VAT Reverse Charge Notes only appear if you have EU VAT enabled or are using your own Avalara AvaTax account and the customer is in the EU, has a VAT number, and is in a different country than your own. This will default to the VAT Reverse Charge Notes text specified on the Tax Settings page in your Recurly admin, unless custom notes were created with the original subscription.\n */\nclass Invoice {}\n\nmodule.exports = Invoice\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/Invoice.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "typedef",
    "name": "Invoice",
    "memberof": "lib/recurly/resources/Invoice.js",
    "static": true,
    "longname": "lib/recurly/resources/Invoice.js~Invoice",
    "access": "public",
    "description": "Invoice",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{AccountMini} account"
      },
      {
        "tagName": "@prop",
        "tagValue": "{InvoiceAddress} address"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} balance - The outstanding balance remaining on this invoice."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} closedAt - Date invoice was marked paid or failed."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} collectionMethod - An automatic invoice means a corresponding transaction is run using the account's billing information at the same time the invoice is created. Manual invoices are created without a corresponding transaction. The merchant must enter a manual payment transaction or have the customer pay the invoice with an automatic method, like credit card, PayPal, Amazon, or ACH bank payment."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<CreditPayment>} creditPayments - Credit payments"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} currency - 3-letter ISO 4217 currency code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} customerNotes - This will default to the Customer Notes text specified on the Invoice Settings. Specify custom notes to add or override Customer Notes."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} discount - Total discounts applied to this invoice."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} dueAt - Date invoice is due. This is the date the net terms are reached."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Invoice ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{LineItemList} lineItems"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} netTerms - Integer representing the number of days after an invoice's creation that the invoice will become past due. If an invoice's net terms are set to '0', it is due 'On Receipt' and will become past due 24 hours after it’s created. If an invoice is due net 30, it will become past due at 31 days exactly."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} number - If VAT taxation and the Country Invoice Sequencing feature are enabled, invoices will have country-specific invoice numbers for invoices billed to EU countries (ex: FR1001). Non-EU invoices will continue to use the site-level invoice number sequence."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} origin - The event that created the invoice."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} paid - The total amount of successful payments transaction on this invoice."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} poNumber - For manual invoicing, this identifies the PO number associated with the subscription."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} previousInvoiceId - On refund invoices, this value will exist and show the invoice ID of the purchase invoice the refund was created from."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} refundableAmount - The refundable amount on a charge invoice. It will be null for all other invoices."
      },
      {
        "tagName": "@prop",
        "tagValue": "{ShippingAddress} shippingAddress"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} state - Invoice state"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<string>} subscriptionIds - If the invoice is charging or refunding for one or more subscriptions, these are their IDs."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} subtotal - The summation of charges, discounts, and credits, before tax."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} tax - The total tax on this invoice."
      },
      {
        "tagName": "@prop",
        "tagValue": "{TaxInfo} taxInfo"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} termsAndConditions - This will default to the Terms and Conditions text specified on the Invoice Settings page in your Recurly admin. Specify custom notes to add or override Terms and Conditions."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} total - The final total on this invoice. The summation of invoice charges, discounts, credits, and tax."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<Transaction>} transactions - Transactions"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} type - Invoices are either charge, credit, or legacy invoices."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Last updated at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} vatNumber - VAT registration number for the customer on this invoice. This will come from the VAT Number field in the Billing Info or the Account Info depending on your tax settings and the invoice collection method."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} vatReverseChargeNotes - VAT Reverse Charge Notes only appear if you have EU VAT enabled or are using your own Avalara AvaTax account and the customer is in the EU, has a VAT number, and is in a different country than your own. This will default to the VAT Reverse Charge Notes text specified on the Tax Settings page in your Recurly admin, unless custom notes were created with the original subscription."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Invoice"
    }
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "lib/recurly/resources/InvoiceAddress.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * InvoiceAddress\n * @typedef {Object} InvoiceAddress\n * @prop {string} city - City\n * @prop {string} country - Country, 2-letter ISO code.\n * @prop {string} firstName - First name\n * @prop {string} lastName - Last name\n * @prop {string} phone - Phone number\n * @prop {string} postalCode - Zip or postal code.\n * @prop {string} region - State or province.\n * @prop {string} street1 - Street 1\n * @prop {string} street2 - Street 2\n */\nclass InvoiceAddress {}\n\nmodule.exports = InvoiceAddress\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/InvoiceAddress.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "typedef",
    "name": "InvoiceAddress",
    "memberof": "lib/recurly/resources/InvoiceAddress.js",
    "static": true,
    "longname": "lib/recurly/resources/InvoiceAddress.js~InvoiceAddress",
    "access": "public",
    "description": "InvoiceAddress",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} city - City"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} country - Country, 2-letter ISO code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} firstName - First name"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} lastName - Last name"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} phone - Phone number"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} postalCode - Zip or postal code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} region - State or province."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} street1 - Street 1"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} street2 - Street 2"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InvoiceAddress"
    }
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "lib/recurly/resources/InvoiceCollection.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * InvoiceCollection\n * @typedef {Object} InvoiceCollection\n * @prop {Invoice} chargeInvoice\n * @prop {Array.<Invoice>} creditInvoices - Credit invoices\n */\nclass InvoiceCollection {}\n\nmodule.exports = InvoiceCollection\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/InvoiceCollection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "typedef",
    "name": "InvoiceCollection",
    "memberof": "lib/recurly/resources/InvoiceCollection.js",
    "static": true,
    "longname": "lib/recurly/resources/InvoiceCollection.js~InvoiceCollection",
    "access": "public",
    "description": "InvoiceCollection",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{Invoice} chargeInvoice"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<Invoice>} creditInvoices - Credit invoices"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InvoiceCollection"
    }
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "lib/recurly/resources/InvoiceMini.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * InvoiceMini\n * @typedef {Object} InvoiceMini\n * @prop {string} id - Invoice ID\n * @prop {string} number - Invoice number\n * @prop {string} state - Invoice state\n * @prop {string} type - Invoice type\n */\nclass InvoiceMini {}\n\nmodule.exports = InvoiceMini\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/InvoiceMini.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "typedef",
    "name": "InvoiceMini",
    "memberof": "lib/recurly/resources/InvoiceMini.js",
    "static": true,
    "longname": "lib/recurly/resources/InvoiceMini.js~InvoiceMini",
    "access": "public",
    "description": "InvoiceMini",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Invoice ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} number - Invoice number"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} state - Invoice state"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} type - Invoice type"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InvoiceMini"
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "lib/recurly/resources/LineItem.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * LineItem\n * @typedef {Object} LineItem\n * @prop {AccountMini} account\n * @prop {string} accountingCode - Internal accounting code to help you reconcile your revenue to the correct ledger. Line items created as part of a subscription invoice will use the plan or add-on's accounting code, otherwise the value will only be present if you define an accounting code when creating the line item.\n * @prop {string} addOnCode - If the line item is a charge or credit for an add-on, this is its code.\n * @prop {string} addOnId - If the line item is a charge or credit for an add-on this is its ID.\n * @prop {number} amount - `(quantity * unit_amount) - (discount + tax)`\n * @prop {datetime} createdAt - When the line item was created.\n * @prop {number} creditApplied - The amount of credit from this line item that was applied to the invoice.\n * @prop {string} creditReasonCode - The reason the credit was given when line item is `type=credit`.\n * @prop {string} currency - 3-letter ISO 4217 currency code.\n * @prop {string} description - Description that appears on the invoice. For subscription related items this will be filled in automatically.\n * @prop {number} discount - The discount applied to the line item.\n * @prop {datetime} endDate - If this date is provided, it indicates the end of a time range.\n * @prop {string} id - Line item ID\n * @prop {string} invoiceId - Once the line item has been invoiced this will be the invoice's ID.\n * @prop {string} invoiceNumber - Once the line item has been invoiced this will be the invoice's number. If VAT taxation and the Country Invoice Sequencing feature are enabled, invoices will have country-specific invoice numbers for invoices billed to EU countries (ex: FR1001). Non-EU invoices will continue to use the site-level invoice number sequence.\n * @prop {string} legacyCategory - Category to describe the role of a line item on a legacy invoice: - \"charges\" refers to charges being billed for on this invoice. - \"credits\" refers to refund or proration credits. This portion of the invoice can be considered a credit memo. - \"applied_credits\" refers to previous credits applied to this invoice. See their original_line_item_id to determine where the credit first originated. - \"carryforwards\" can be ignored. They exist to consume any remaining credit balance. A new credit with the same amount will be created and placed back on the account.\n * @prop {string} origin - A credit created from an original charge will have the value of the charge's origin.\n * @prop {string} originalLineItemInvoiceId - The invoice where the credit originated. Will only have a value if the line item is a credit created from a previous credit, or if the credit was created from a charge refund.\n * @prop {string} planCode - If the line item is a charge or credit for a plan or add-on, this is the plan's code.\n * @prop {string} planId - If the line item is a charge or credit for a plan or add-on, this is the plan's ID.\n * @prop {string} previousLineItemId - Will only have a value if the line item is a credit created from a previous credit, or if the credit was created from a charge refund.\n * @prop {string} productCode - For plan related line items this will be the plan's code, for add-on related line items it will be the add-on's code.\n * @prop {number} prorationRate - When a line item has been prorated, this is the rate of the proration. Proration rates were made available for line items created after March 30, 2017. For line items created prior to that date, the proration rate will be `null`, even if the line item was prorated.\n * @prop {number} quantity - This number will be multiplied by the unit amount to compute the subtotal before any discounts or taxes.\n * @prop {boolean} refund - Refund?\n * @prop {number} refundedQuantity - For refund charges, the quantity being refunded. For non-refund charges, the total quantity refunded (possibly over multiple refunds).\n * @prop {ShippingAddress} shippingAddress\n * @prop {datetime} startDate - If an end date is present, this is value indicates the beginning of a billing time range. If no end date is present it indicates billing for a specific date.\n * @prop {string} state - Pending line items are charges or credits on an account that have not been applied to an invoice yet. Invoiced line items will always have an `invoice_id` value.\n * @prop {string} subscriptionId - If the line item is a charge or credit for a subscription, this is its ID.\n * @prop {number} subtotal - `quantity * unit_amount`\n * @prop {number} tax - The tax amount for the line item.\n * @prop {string} taxCode - Optional field for EU VAT merchants and Avalara AvaTax Pro merchants. If you are using Recurly's EU VAT feature, you can use values of unknown, physical, or digital. If you have your own AvaTax account configured, you can use Avalara tax codes to assign custom tax rules.\n * @prop {boolean} taxExempt - `true` exempts tax on charges, `false` applies tax on charges. If not defined, then defaults to the Plan and Site settings. This attribute does not work for credits (negative line items). Credits are always applied post-tax. Pre-tax discounts should use the Coupons feature.\n * @prop {TaxInfo} taxInfo\n * @prop {boolean} taxable - `true` if the line item is taxable, `false` if it is not.\n * @prop {string} type - Charges are positive line items that debit the account. Credits are negative line items that credit the account.\n * @prop {number} unitAmount - Positive amount for a charge, negative amount for a credit.\n * @prop {datetime} updatedAt - When the line item was last changed.\n * @prop {string} uuid - The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI.\n */\nclass LineItem {}\n\nmodule.exports = LineItem\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/LineItem.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "typedef",
    "name": "LineItem",
    "memberof": "lib/recurly/resources/LineItem.js",
    "static": true,
    "longname": "lib/recurly/resources/LineItem.js~LineItem",
    "access": "public",
    "description": "LineItem",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{AccountMini} account"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} accountingCode - Internal accounting code to help you reconcile your revenue to the correct ledger. Line items created as part of a subscription invoice will use the plan or add-on's accounting code, otherwise the value will only be present if you define an accounting code when creating the line item."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} addOnCode - If the line item is a charge or credit for an add-on, this is its code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} addOnId - If the line item is a charge or credit for an add-on this is its ID."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} amount - `(quantity * unit_amount) - (discount + tax)`"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - When the line item was created."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} creditApplied - The amount of credit from this line item that was applied to the invoice."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} creditReasonCode - The reason the credit was given when line item is `type=credit`."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} currency - 3-letter ISO 4217 currency code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} description - Description that appears on the invoice. For subscription related items this will be filled in automatically."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} discount - The discount applied to the line item."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} endDate - If this date is provided, it indicates the end of a time range."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Line item ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} invoiceId - Once the line item has been invoiced this will be the invoice's ID."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} invoiceNumber - Once the line item has been invoiced this will be the invoice's number. If VAT taxation and the Country Invoice Sequencing feature are enabled, invoices will have country-specific invoice numbers for invoices billed to EU countries (ex: FR1001). Non-EU invoices will continue to use the site-level invoice number sequence."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} legacyCategory - Category to describe the role of a line item on a legacy invoice: - \"charges\" refers to charges being billed for on this invoice. - \"credits\" refers to refund or proration credits. This portion of the invoice can be considered a credit memo. - \"applied_credits\" refers to previous credits applied to this invoice. See their original_line_item_id to determine where the credit first originated. - \"carryforwards\" can be ignored. They exist to consume any remaining credit balance. A new credit with the same amount will be created and placed back on the account."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} origin - A credit created from an original charge will have the value of the charge's origin."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} originalLineItemInvoiceId - The invoice where the credit originated. Will only have a value if the line item is a credit created from a previous credit, or if the credit was created from a charge refund."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} planCode - If the line item is a charge or credit for a plan or add-on, this is the plan's code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} planId - If the line item is a charge or credit for a plan or add-on, this is the plan's ID."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} previousLineItemId - Will only have a value if the line item is a credit created from a previous credit, or if the credit was created from a charge refund."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} productCode - For plan related line items this will be the plan's code, for add-on related line items it will be the add-on's code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} prorationRate - When a line item has been prorated, this is the rate of the proration. Proration rates were made available for line items created after March 30, 2017. For line items created prior to that date, the proration rate will be `null`, even if the line item was prorated."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} quantity - This number will be multiplied by the unit amount to compute the subtotal before any discounts or taxes."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} refund - Refund?"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} refundedQuantity - For refund charges, the quantity being refunded. For non-refund charges, the total quantity refunded (possibly over multiple refunds)."
      },
      {
        "tagName": "@prop",
        "tagValue": "{ShippingAddress} shippingAddress"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} startDate - If an end date is present, this is value indicates the beginning of a billing time range. If no end date is present it indicates billing for a specific date."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} state - Pending line items are charges or credits on an account that have not been applied to an invoice yet. Invoiced line items will always have an `invoice_id` value."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} subscriptionId - If the line item is a charge or credit for a subscription, this is its ID."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} subtotal - `quantity * unit_amount`"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} tax - The tax amount for the line item."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} taxCode - Optional field for EU VAT merchants and Avalara AvaTax Pro merchants. If you are using Recurly's EU VAT feature, you can use values of unknown, physical, or digital. If you have your own AvaTax account configured, you can use Avalara tax codes to assign custom tax rules."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} taxExempt - `true` exempts tax on charges, `false` applies tax on charges. If not defined, then defaults to the Plan and Site settings. This attribute does not work for credits (negative line items). Credits are always applied post-tax. Pre-tax discounts should use the Coupons feature."
      },
      {
        "tagName": "@prop",
        "tagValue": "{TaxInfo} taxInfo"
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} taxable - `true` if the line item is taxable, `false` if it is not."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} type - Charges are positive line items that debit the account. Credits are negative line items that credit the account."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} unitAmount - Positive amount for a charge, negative amount for a credit."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - When the line item was last changed."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} uuid - The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "LineItem"
    }
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "lib/recurly/resources/LineItemList.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * LineItemList\n * @typedef {Object} LineItemList\n * @prop {Array.<LineItem>} data\n * @prop {boolean} hasMore - Indicates there are more results on subsequent pages.\n * @prop {string} next - Path to subsequent page of results.\n */\nclass LineItemList {}\n\nmodule.exports = LineItemList\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/LineItemList.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "typedef",
    "name": "LineItemList",
    "memberof": "lib/recurly/resources/LineItemList.js",
    "static": true,
    "longname": "lib/recurly/resources/LineItemList.js~LineItemList",
    "access": "public",
    "description": "LineItemList",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{Array.<LineItem>} data"
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} hasMore - Indicates there are more results on subsequent pages."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} next - Path to subsequent page of results."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "LineItemList"
    }
  },
  {
    "__docId__": 222,
    "kind": "file",
    "name": "lib/recurly/resources/Plan.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * Plan\n * @typedef {Object} Plan\n * @prop {string} accountingCode - Accounting code for invoice line items for the plan. If no value is provided, it defaults to plan's code.\n * @prop {boolean} autoRenew - Subscriptions will automatically inherit this value once they are active. If `auto_renew` is `true`, then a subscription will automatically renew its term at renewal. If `auto_renew` is `false`, then a subscription will expire at the end of its term. `auto_renew` can be overridden on the subscription record itself.\n * @prop {string} code - Unique code to identify the plan. This is used in Hosted Payment Page URLs and in the invoice exports.\n * @prop {datetime} createdAt - Created at\n * @prop {Array.<PlanPricing>} currencies - Pricing\n * @prop {datetime} deletedAt - Deleted at\n * @prop {string} description - Optional description, not displayed.\n * @prop {Object} hostedPages - Hosted pages settings\n * @prop {string} id - Plan ID\n * @prop {number} intervalLength - Length of the plan's billing interval in `interval_unit`.\n * @prop {string} intervalUnit - Unit for the plan's billing interval.\n * @prop {string} name - This name describes your plan and will appear on the Hosted Payment Page and the subscriber's invoice.\n * @prop {string} setupFeeAccountingCode - Accounting code for invoice line items for the plan's setup fee. If no value is provided, it defaults to plan's accounting code.\n * @prop {string} state - The current state of the plan.\n * @prop {string} taxCode - Optional field for EU VAT merchants and Avalara AvaTax Pro merchants. If you are using Recurly's EU VAT feature, you can use values of 'unknown', 'physical', or 'digital'. If you have your own AvaTax account configured, you can use Avalara tax codes to assign custom tax rules.\n * @prop {boolean} taxExempt - `true` exempts tax on the plan, `false` applies tax on the plan.\n * @prop {number} totalBillingCycles - Automatically terminate subscriptions after a defined number of billing cycles. Number of billing cycles before the plan automatically stops renewing, defaults to `null` for continuous, automatic renewal.\n * @prop {number} trialLength - Length of plan's trial period in `trial_units`. `0` means `no trial`.\n * @prop {string} trialUnit - Units for the plan's trial period.\n * @prop {datetime} updatedAt - Last updated at\n */\nclass Plan {}\n\nmodule.exports = Plan\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/Plan.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 223,
    "kind": "typedef",
    "name": "Plan",
    "memberof": "lib/recurly/resources/Plan.js",
    "static": true,
    "longname": "lib/recurly/resources/Plan.js~Plan",
    "access": "public",
    "description": "Plan",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} accountingCode - Accounting code for invoice line items for the plan. If no value is provided, it defaults to plan's code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} autoRenew - Subscriptions will automatically inherit this value once they are active. If `auto_renew` is `true`, then a subscription will automatically renew its term at renewal. If `auto_renew` is `false`, then a subscription will expire at the end of its term. `auto_renew` can be overridden on the subscription record itself."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} code - Unique code to identify the plan. This is used in Hosted Payment Page URLs and in the invoice exports."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<PlanPricing>} currencies - Pricing"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} deletedAt - Deleted at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} description - Optional description, not displayed."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} hostedPages - Hosted pages settings"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Plan ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} intervalLength - Length of the plan's billing interval in `interval_unit`."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} intervalUnit - Unit for the plan's billing interval."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} name - This name describes your plan and will appear on the Hosted Payment Page and the subscriber's invoice."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} setupFeeAccountingCode - Accounting code for invoice line items for the plan's setup fee. If no value is provided, it defaults to plan's accounting code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} state - The current state of the plan."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} taxCode - Optional field for EU VAT merchants and Avalara AvaTax Pro merchants. If you are using Recurly's EU VAT feature, you can use values of 'unknown', 'physical', or 'digital'. If you have your own AvaTax account configured, you can use Avalara tax codes to assign custom tax rules."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} taxExempt - `true` exempts tax on the plan, `false` applies tax on the plan."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} totalBillingCycles - Automatically terminate subscriptions after a defined number of billing cycles. Number of billing cycles before the plan automatically stops renewing, defaults to `null` for continuous, automatic renewal."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} trialLength - Length of plan's trial period in `trial_units`. `0` means `no trial`."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} trialUnit - Units for the plan's trial period."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Last updated at"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Plan"
    }
  },
  {
    "__docId__": 224,
    "kind": "file",
    "name": "lib/recurly/resources/PlanMini.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * PlanMini\n * @typedef {Object} PlanMini\n * @prop {string} code - Unique code to identify the plan. This is used in Hosted Payment Page URLs and in the invoice exports.\n * @prop {string} id - Plan ID\n * @prop {string} name - This name describes your plan and will appear on the Hosted Payment Page and the subscriber's invoice.\n */\nclass PlanMini {}\n\nmodule.exports = PlanMini\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/PlanMini.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 225,
    "kind": "typedef",
    "name": "PlanMini",
    "memberof": "lib/recurly/resources/PlanMini.js",
    "static": true,
    "longname": "lib/recurly/resources/PlanMini.js~PlanMini",
    "access": "public",
    "description": "PlanMini",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} code - Unique code to identify the plan. This is used in Hosted Payment Page URLs and in the invoice exports."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Plan ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} name - This name describes your plan and will appear on the Hosted Payment Page and the subscriber's invoice."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PlanMini"
    }
  },
  {
    "__docId__": 226,
    "kind": "file",
    "name": "lib/recurly/resources/PlanPricing.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * PlanPricing\n * @typedef {Object} PlanPricing\n * @prop {string} currency - 3-letter ISO 4217 currency code.\n * @prop {number} setupFee - Amount of one-time setup fee automatically charged at the beginning of a subscription billing cycle. For subscription plans with a trial, the setup fee will be charged at the time of signup. Setup fees do not increase with the quantity of a subscription plan.\n * @prop {number} unitAmount - Unit price\n */\nclass PlanPricing {}\n\nmodule.exports = PlanPricing\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/PlanPricing.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 227,
    "kind": "typedef",
    "name": "PlanPricing",
    "memberof": "lib/recurly/resources/PlanPricing.js",
    "static": true,
    "longname": "lib/recurly/resources/PlanPricing.js~PlanPricing",
    "access": "public",
    "description": "PlanPricing",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} currency - 3-letter ISO 4217 currency code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} setupFee - Amount of one-time setup fee automatically charged at the beginning of a subscription billing cycle. For subscription plans with a trial, the setup fee will be charged at the time of signup. Setup fees do not increase with the quantity of a subscription plan."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} unitAmount - Unit price"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PlanPricing"
    }
  },
  {
    "__docId__": 228,
    "kind": "file",
    "name": "lib/recurly/resources/Settings.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * Settings\n * @typedef {Object} Settings\n * @prop {Array.<string>} acceptedCurrencies\n * @prop {string} billingAddressRequirement - - full:      Full Address (Street, City, State, Postal Code and Country) - streetzip: Street and Postal Code only - zip:       Postal Code only - none:      No Address\n * @prop {string} defaultCurrency - The default 3-letter ISO 4217 currency code.\n */\nclass Settings {}\n\nmodule.exports = Settings\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/Settings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 229,
    "kind": "typedef",
    "name": "Settings",
    "memberof": "lib/recurly/resources/Settings.js",
    "static": true,
    "longname": "lib/recurly/resources/Settings.js~Settings",
    "access": "public",
    "description": "Settings",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{Array.<string>} acceptedCurrencies"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} billingAddressRequirement - - full:      Full Address (Street, City, State, Postal Code and Country) - streetzip: Street and Postal Code only - zip:       Postal Code only - none:      No Address"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} defaultCurrency - The default 3-letter ISO 4217 currency code."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Settings"
    }
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "lib/recurly/resources/ShippingAddress.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * ShippingAddress\n * @typedef {Object} ShippingAddress\n * @prop {string} accountId - Account ID\n * @prop {string} city\n * @prop {string} company\n * @prop {string} country - Country, 2-letter ISO code.\n * @prop {datetime} createdAt - Created at\n * @prop {string} email\n * @prop {string} firstName\n * @prop {string} id - Shipping Address ID\n * @prop {string} lastName\n * @prop {string} nickname\n * @prop {string} phone\n * @prop {string} postalCode - Zip or postal code.\n * @prop {string} region - State or province.\n * @prop {string} street1\n * @prop {string} street2\n * @prop {datetime} updatedAt - Updated at\n * @prop {string} vatNumber\n */\nclass ShippingAddress {}\n\nmodule.exports = ShippingAddress\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/ShippingAddress.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "typedef",
    "name": "ShippingAddress",
    "memberof": "lib/recurly/resources/ShippingAddress.js",
    "static": true,
    "longname": "lib/recurly/resources/ShippingAddress.js~ShippingAddress",
    "access": "public",
    "description": "ShippingAddress",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} accountId - Account ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} city"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} company"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} country - Country, 2-letter ISO code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} email"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} firstName"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Shipping Address ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} lastName"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} nickname"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} phone"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} postalCode - Zip or postal code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} region - State or province."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} street1"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} street2"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Updated at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} vatNumber"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ShippingAddress"
    }
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "lib/recurly/resources/ShippingMethod.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * ShippingMethod\n * @typedef {Object} ShippingMethod\n * @prop {string} code - The internal name used identify the shipping service.\n * @prop {datetime} createdAt - Created at\n * @prop {datetime} deletedAt - Deleted at\n * @prop {string} id - Shipping Service ID\n * @prop {string} name - The name of the shipping service displayed to customers.\n * @prop {string} taxCode - Optional field for EU VAT merchants, Vertex and Avalara AvaTax Pro merchants.\n * @prop {datetime} updatedAt - Last updated at\n */\nclass ShippingMethod {}\n\nmodule.exports = ShippingMethod\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/ShippingMethod.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "typedef",
    "name": "ShippingMethod",
    "memberof": "lib/recurly/resources/ShippingMethod.js",
    "static": true,
    "longname": "lib/recurly/resources/ShippingMethod.js~ShippingMethod",
    "access": "public",
    "description": "ShippingMethod",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} code - The internal name used identify the shipping service."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} deletedAt - Deleted at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Shipping Service ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} name - The name of the shipping service displayed to customers."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} taxCode - Optional field for EU VAT merchants, Vertex and Avalara AvaTax Pro merchants."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Last updated at"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ShippingMethod"
    }
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "lib/recurly/resources/Site.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * Site\n * @typedef {Object} Site\n * @prop {Address} address\n * @prop {datetime} createdAt - Created at\n * @prop {datetime} deletedAt - Deleted at\n * @prop {Array.<string>} features - A list of features enabled for the site.\n * @prop {string} id - Site ID\n * @prop {string} mode - Mode\n * @prop {string} publicApiKey - This value is used to configure RecurlyJS to submit tokenized billing information.\n * @prop {Settings} settings\n * @prop {string} subdomain\n * @prop {datetime} updatedAt - Updated at\n */\nclass Site {}\n\nmodule.exports = Site\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/Site.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "typedef",
    "name": "Site",
    "memberof": "lib/recurly/resources/Site.js",
    "static": true,
    "longname": "lib/recurly/resources/Site.js~Site",
    "access": "public",
    "description": "Site",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{Address} address"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} deletedAt - Deleted at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<string>} features - A list of features enabled for the site."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Site ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} mode - Mode"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} publicApiKey - This value is used to configure RecurlyJS to submit tokenized billing information."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Settings} settings"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} subdomain"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Updated at"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Site"
    }
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "lib/recurly/resources/Subscription.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * Subscription\n * @typedef {Object} Subscription\n * @prop {AccountMini} account\n * @prop {datetime} activatedAt - Activated at\n * @prop {Array.<SubscriptionAddOn>} addOns - Add-ons\n * @prop {number} addOnsTotal - Total price of add-ons\n * @prop {boolean} autoRenew - Whether the subscription renews at the end of its term.\n * @prop {datetime} bankAccountAuthorizedAt - Recurring subscriptions paid with ACH will have this attribute set. This timestamp is used for alerting customers to reauthorize in 3 years in accordance with NACHA rules. If a subscription becomes inactive or the billing info is no longer a bank account, this timestamp is cleared.\n * @prop {datetime} canceledAt - Canceled at\n * @prop {string} collectionMethod - Collection method\n * @prop {Array.<CouponRedemptionMini>} couponRedemptions - Coupon redemptions\n * @prop {datetime} createdAt - Created at\n * @prop {string} currency - 3-letter ISO 4217 currency code.\n * @prop {datetime} currentPeriodEndsAt - Current billing period ends at\n * @prop {datetime} currentPeriodStartedAt - Current billing period started at\n * @prop {datetime} currentTermEndsAt - When the term ends. This is calculated by a plan's interval and `total_billing_cycles` in a term. Subscription changes with a `timeframe=renewal` will be applied on this date.\n * @prop {datetime} currentTermStartedAt - The start date of the term when the first billing period starts. The subscription term is the length of time that a customer will be committed to a subscription. A term can span multiple billing periods.\n * @prop {Array.<CustomField>} customFields\n * @prop {string} customerNotes - Customer notes\n * @prop {string} expirationReason - Expiration reason\n * @prop {datetime} expiresAt - Expires at\n * @prop {string} id - Subscription ID\n * @prop {number} netTerms - Integer representing the number of days after an invoice's creation that the invoice will become past due. If an invoice's net terms are set to '0', it is due 'On Receipt' and will become past due 24 hours after it’s created. If an invoice is due net 30, it will become past due at 31 days exactly.\n * @prop {datetime} pausedAt - Null unless subscription is paused or will pause at the end of the current billing period.\n * @prop {SubscriptionChange} pendingChange\n * @prop {PlanMini} plan\n * @prop {string} poNumber - For manual invoicing, this identifies the PO number associated with the subscription.\n * @prop {number} quantity - Subscription quantity\n * @prop {number} remainingBillingCycles - The remaining billing cycles in the current term.\n * @prop {number} remainingPauseCycles - Null unless subscription is paused or will pause at the end of the current billing period.\n * @prop {number} renewalBillingCycles - If `auto_renew=true`, when a term completes, `total_billing_cycles` takes this value as the length of subsequent terms. Defaults to the plan's `total_billing_cycles`.\n * @prop {ShippingAddress} shippingAddress\n * @prop {string} state - State\n * @prop {number} subtotal - Estimated total, before tax.\n * @prop {string} termsAndConditions - Terms and conditions\n * @prop {number} totalBillingCycles - The number of cycles/billing periods in a term. When `remaining_billing_cycles=0`, if `auto_renew=true` the subscription will renew and a new term will begin, otherwise the subscription will expire.\n * @prop {datetime} trialEndsAt - Trial period ends at\n * @prop {datetime} trialStartedAt - Trial period started at\n * @prop {number} unitAmount - Subscription unit price\n * @prop {datetime} updatedAt - Last updated at\n * @prop {string} uuid - The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI.\n */\nclass Subscription {}\n\nmodule.exports = Subscription\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/Subscription.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "typedef",
    "name": "Subscription",
    "memberof": "lib/recurly/resources/Subscription.js",
    "static": true,
    "longname": "lib/recurly/resources/Subscription.js~Subscription",
    "access": "public",
    "description": "Subscription",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{AccountMini} account"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} activatedAt - Activated at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<SubscriptionAddOn>} addOns - Add-ons"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} addOnsTotal - Total price of add-ons"
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} autoRenew - Whether the subscription renews at the end of its term."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} bankAccountAuthorizedAt - Recurring subscriptions paid with ACH will have this attribute set. This timestamp is used for alerting customers to reauthorize in 3 years in accordance with NACHA rules. If a subscription becomes inactive or the billing info is no longer a bank account, this timestamp is cleared."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} canceledAt - Canceled at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} collectionMethod - Collection method"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<CouponRedemptionMini>} couponRedemptions - Coupon redemptions"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} currency - 3-letter ISO 4217 currency code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} currentPeriodEndsAt - Current billing period ends at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} currentPeriodStartedAt - Current billing period started at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} currentTermEndsAt - When the term ends. This is calculated by a plan's interval and `total_billing_cycles` in a term. Subscription changes with a `timeframe=renewal` will be applied on this date."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} currentTermStartedAt - The start date of the term when the first billing period starts. The subscription term is the length of time that a customer will be committed to a subscription. A term can span multiple billing periods."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<CustomField>} customFields"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} customerNotes - Customer notes"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} expirationReason - Expiration reason"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} expiresAt - Expires at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Subscription ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} netTerms - Integer representing the number of days after an invoice's creation that the invoice will become past due. If an invoice's net terms are set to '0', it is due 'On Receipt' and will become past due 24 hours after it’s created. If an invoice is due net 30, it will become past due at 31 days exactly."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} pausedAt - Null unless subscription is paused or will pause at the end of the current billing period."
      },
      {
        "tagName": "@prop",
        "tagValue": "{SubscriptionChange} pendingChange"
      },
      {
        "tagName": "@prop",
        "tagValue": "{PlanMini} plan"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} poNumber - For manual invoicing, this identifies the PO number associated with the subscription."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} quantity - Subscription quantity"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} remainingBillingCycles - The remaining billing cycles in the current term."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} remainingPauseCycles - Null unless subscription is paused or will pause at the end of the current billing period."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} renewalBillingCycles - If `auto_renew=true`, when a term completes, `total_billing_cycles` takes this value as the length of subsequent terms. Defaults to the plan's `total_billing_cycles`."
      },
      {
        "tagName": "@prop",
        "tagValue": "{ShippingAddress} shippingAddress"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} state - State"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} subtotal - Estimated total, before tax."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} termsAndConditions - Terms and conditions"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} totalBillingCycles - The number of cycles/billing periods in a term. When `remaining_billing_cycles=0`, if `auto_renew=true` the subscription will renew and a new term will begin, otherwise the subscription will expire."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} trialEndsAt - Trial period ends at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} trialStartedAt - Trial period started at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} unitAmount - Subscription unit price"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Last updated at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} uuid - The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Subscription"
    }
  },
  {
    "__docId__": 238,
    "kind": "file",
    "name": "lib/recurly/resources/SubscriptionAddOn.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * SubscriptionAddOn\n * @typedef {Object} SubscriptionAddOn\n * @prop {AddOnMini} addOn\n * @prop {datetime} createdAt - Created at\n * @prop {datetime} expiredAt - Expired at\n * @prop {string} id - Subscription Add-on ID\n * @prop {number} quantity - Add-on quantity\n * @prop {string} subscriptionId - Subscription ID\n * @prop {number} unitAmount - This is priced in the subscription's currency.\n * @prop {datetime} updatedAt - Updated at\n */\nclass SubscriptionAddOn {}\n\nmodule.exports = SubscriptionAddOn\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/SubscriptionAddOn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 239,
    "kind": "typedef",
    "name": "SubscriptionAddOn",
    "memberof": "lib/recurly/resources/SubscriptionAddOn.js",
    "static": true,
    "longname": "lib/recurly/resources/SubscriptionAddOn.js~SubscriptionAddOn",
    "access": "public",
    "description": "SubscriptionAddOn",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{AddOnMini} addOn"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} expiredAt - Expired at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Subscription Add-on ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} quantity - Add-on quantity"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} subscriptionId - Subscription ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} unitAmount - This is priced in the subscription's currency."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Updated at"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SubscriptionAddOn"
    }
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "lib/recurly/resources/SubscriptionChange.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * SubscriptionChange\n * @typedef {Object} SubscriptionChange\n * @prop {datetime} activateAt - Activated at\n * @prop {boolean} activated - Returns `true` if the subscription change is activated.\n * @prop {Array.<SubscriptionAddOn>} addOns - These add-ons will be used when the subscription renews.\n * @prop {datetime} createdAt - Created at\n * @prop {datetime} deletedAt - Deleted at\n * @prop {string} id - The ID of the Subscription Change.\n * @prop {PlanMini} plan\n * @prop {number} quantity - Subscription quantity\n * @prop {string} subscriptionId - The ID of the subscription that is going to be changed.\n * @prop {number} unitAmount - Unit amount\n * @prop {datetime} updatedAt - Updated at\n */\nclass SubscriptionChange {}\n\nmodule.exports = SubscriptionChange\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/SubscriptionChange.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "typedef",
    "name": "SubscriptionChange",
    "memberof": "lib/recurly/resources/SubscriptionChange.js",
    "static": true,
    "longname": "lib/recurly/resources/SubscriptionChange.js~SubscriptionChange",
    "access": "public",
    "description": "SubscriptionChange",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{datetime} activateAt - Activated at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} activated - Returns `true` if the subscription change is activated."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<SubscriptionAddOn>} addOns - These add-ons will be used when the subscription renews."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} deletedAt - Deleted at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - The ID of the Subscription Change."
      },
      {
        "tagName": "@prop",
        "tagValue": "{PlanMini} plan"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} quantity - Subscription quantity"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} subscriptionId - The ID of the subscription that is going to be changed."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} unitAmount - Unit amount"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Updated at"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SubscriptionChange"
    }
  },
  {
    "__docId__": 242,
    "kind": "file",
    "name": "lib/recurly/resources/TaxInfo.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * TaxInfo\n * @typedef {Object} TaxInfo\n * @prop {number} rate - Rate\n * @prop {string} region - Provides the tax region applied on an invoice. For U.S. Sales Tax, this will be the 2 letter state code. For EU VAT this will be the 2 letter country code. For all country level tax types, this will display the regional tax, like VAT, GST, or PST.\n * @prop {string} type - Provides the tax type as \"vat\" for EU VAT, \"usst\" for U.S. Sales Tax, or the 2 letter country code for country level tax types like Canada, Australia, New Zealand, Israel, and all non-EU European countries.\n */\nclass TaxInfo {}\n\nmodule.exports = TaxInfo\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/TaxInfo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "typedef",
    "name": "TaxInfo",
    "memberof": "lib/recurly/resources/TaxInfo.js",
    "static": true,
    "longname": "lib/recurly/resources/TaxInfo.js~TaxInfo",
    "access": "public",
    "description": "TaxInfo",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{number} rate - Rate"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} region - Provides the tax region applied on an invoice. For U.S. Sales Tax, this will be the 2 letter state code. For EU VAT this will be the 2 letter country code. For all country level tax types, this will display the regional tax, like VAT, GST, or PST."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} type - Provides the tax type as \"vat\" for EU VAT, \"usst\" for U.S. Sales Tax, or the 2 letter country code for country level tax types like Canada, Australia, New Zealand, Israel, and all non-EU European countries."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TaxInfo"
    }
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "lib/recurly/resources/Transaction.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * Transaction\n * @typedef {Object} Transaction\n * @prop {AccountMini} account\n * @prop {number} amount - Total transaction amount sent to the payment gateway.\n * @prop {string} avsCheck - When processed, result from checking the overall AVS on the transaction.\n * @prop {Address} billingAddress\n * @prop {datetime} collectedAt - Collected at, or if not collected yet, the time the transaction was created.\n * @prop {string} collectionMethod - The method by which the payment was collected.\n * @prop {datetime} createdAt - Created at\n * @prop {string} currency - 3-letter ISO 4217 currency code.\n * @prop {string} customerMessage - For declined (`success=false`) transactions, the message displayed to the customer.\n * @prop {string} customerMessageLocale - Language code for the message\n * @prop {string} cvvCheck - When processed, result from checking the CVV/CVC value on the transaction.\n * @prop {string} gatewayApprovalCode - Transaction approval code from the payment gateway.\n * @prop {string} gatewayMessage - Transaction message from the payment gateway.\n * @prop {string} gatewayReference - Transaction reference number from the payment gateway.\n * @prop {string} gatewayResponseCode - For declined transactions (`success=false`), this field lists the gateway error code.\n * @prop {number} gatewayResponseTime - Time, in seconds, for gateway to process the transaction.\n * @prop {Object} gatewayResponseValues - The values in this field will vary from gateway to gateway.\n * @prop {string} id - Transaction ID\n * @prop {InvoiceMini} invoice\n * @prop {string} ipAddressCountry - IP address's country\n * @prop {string} ipAddressV4 - IP address provided when the billing information was collected:  - When the customer enters billing information into the Recurly.JS or Hosted Payment Pages, Recurly records the IP address. - When the merchant enters billing information using the API, the merchant may provide an IP address. - When the merchant enters billing information using the UI, no IP address is recorded.\n * @prop {string} origin - Describes how the transaction was triggered.\n * @prop {string} originalTransactionId - If this transaction is a refund (`type=refund`), this will be the ID of the original transaction on the invoice being refunded.\n * @prop {Object} paymentGateway\n * @prop {Object} paymentMethod - Payment method (TODO: this overlaps with BillingInfo’s payment_method but only documents credit cards)\n * @prop {boolean} refunded - Indicates if part or all of this transaction was refunded.\n * @prop {string} status - The current transaction status. Note that the status may change, e.g. a `pending` transaction may become `declined` or `success` may later become `void`.\n * @prop {string} statusCode - Status code\n * @prop {string} statusMessage - For declined (`success=false`) transactions, the message displayed to the merchant.\n * @prop {Array.<string>} subscriptionIds - If the transaction is charging or refunding for one or more subscriptions, these are their IDs.\n * @prop {boolean} success - Did this transaction complete successfully?\n * @prop {string} type - - `authorization` – verifies billing information and places a hold on money in the customer's account. - `capture` – captures funds held by an authorization and completes a purchase. - `purchase` – combines the authorization and capture in one transaction. - `refund` – returns all or a portion of the money collected in a previous transaction to the customer. - `verify` – a $0 or $1 transaction used to verify billing information which is immediately voided.\n * @prop {string} uuid - The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI.\n * @prop {datetime} voidedAt - Voided at\n * @prop {InvoiceMini} voidedByInvoice\n */\nclass Transaction {}\n\nmodule.exports = Transaction\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/Transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "typedef",
    "name": "Transaction",
    "memberof": "lib/recurly/resources/Transaction.js",
    "static": true,
    "longname": "lib/recurly/resources/Transaction.js~Transaction",
    "access": "public",
    "description": "Transaction",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{AccountMini} account"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} amount - Total transaction amount sent to the payment gateway."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} avsCheck - When processed, result from checking the overall AVS on the transaction."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Address} billingAddress"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} collectedAt - Collected at, or if not collected yet, the time the transaction was created."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} collectionMethod - The method by which the payment was collected."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} currency - 3-letter ISO 4217 currency code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} customerMessage - For declined (`success=false`) transactions, the message displayed to the customer."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} customerMessageLocale - Language code for the message"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} cvvCheck - When processed, result from checking the CVV/CVC value on the transaction."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} gatewayApprovalCode - Transaction approval code from the payment gateway."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} gatewayMessage - Transaction message from the payment gateway."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} gatewayReference - Transaction reference number from the payment gateway."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} gatewayResponseCode - For declined transactions (`success=false`), this field lists the gateway error code."
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} gatewayResponseTime - Time, in seconds, for gateway to process the transaction."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} gatewayResponseValues - The values in this field will vary from gateway to gateway."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Transaction ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{InvoiceMini} invoice"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} ipAddressCountry - IP address's country"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} ipAddressV4 - IP address provided when the billing information was collected:  - When the customer enters billing information into the Recurly.JS or Hosted Payment Pages, Recurly records the IP address. - When the merchant enters billing information using the API, the merchant may provide an IP address. - When the merchant enters billing information using the UI, no IP address is recorded."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} origin - Describes how the transaction was triggered."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} originalTransactionId - If this transaction is a refund (`type=refund`), this will be the ID of the original transaction on the invoice being refunded."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} paymentGateway"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} paymentMethod - Payment method (TODO: this overlaps with BillingInfo’s payment_method but only documents credit cards)"
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} refunded - Indicates if part or all of this transaction was refunded."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} status - The current transaction status. Note that the status may change, e.g. a `pending` transaction may become `declined` or `success` may later become `void`."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} statusCode - Status code"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} statusMessage - For declined (`success=false`) transactions, the message displayed to the merchant."
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array.<string>} subscriptionIds - If the transaction is charging or refunding for one or more subscriptions, these are their IDs."
      },
      {
        "tagName": "@prop",
        "tagValue": "{boolean} success - Did this transaction complete successfully?"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} type - - `authorization` – verifies billing information and places a hold on money in the customer's account. - `capture` – captures funds held by an authorization and completes a purchase. - `purchase` – combines the authorization and capture in one transaction. - `refund` – returns all or a portion of the money collected in a previous transaction to the customer. - `verify` – a $0 or $1 transaction used to verify billing information which is immediately voided."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} uuid - The UUID is useful for matching data with the CSV exports and building URLs into Recurly's UI."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} voidedAt - Voided at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{InvoiceMini} voidedByInvoice"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Transaction"
    }
  },
  {
    "__docId__": 246,
    "kind": "file",
    "name": "lib/recurly/resources/UniqueCouponCode.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * UniqueCouponCode\n * @typedef {Object} UniqueCouponCode\n * @prop {string} code - The code the customer enters to redeem the coupon.\n * @prop {datetime} createdAt - Created at\n * @prop {datetime} expiredAt - The date and time the coupon was expired early or reached its `max_redemptions`.\n * @prop {string} id - Unique Coupon Code ID\n * @prop {datetime} redeemedAt - The date and time the unique coupon code was redeemed.\n * @prop {string} state - Indicates if the unique coupon code is redeemable or why not.\n * @prop {datetime} updatedAt - Updated at\n */\nclass UniqueCouponCode {}\n\nmodule.exports = UniqueCouponCode\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/UniqueCouponCode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 247,
    "kind": "typedef",
    "name": "UniqueCouponCode",
    "memberof": "lib/recurly/resources/UniqueCouponCode.js",
    "static": true,
    "longname": "lib/recurly/resources/UniqueCouponCode.js~UniqueCouponCode",
    "access": "public",
    "description": "UniqueCouponCode",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{string} code - The code the customer enters to redeem the coupon."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt - Created at"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} expiredAt - The date and time the coupon was expired early or reached its `max_redemptions`."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id - Unique Coupon Code ID"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} redeemedAt - The date and time the unique coupon code was redeemed."
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} state - Indicates if the unique coupon code is redeemable or why not."
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} updatedAt - Updated at"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "UniqueCouponCode"
    }
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "lib/recurly/resources/User.js",
    "content": "/**\n * This file is automatically created by Recurly's OpenAPI generation process\n * and thus any edits you make by hand will be lost. If you wish to make a\n * change to this file, please create a Github issue explaining the changes you\n * need and we will usher them to the appropriate places.\n */\n'use strict'\n\n/**\n * User\n * @typedef {Object} User\n * @prop {datetime} createdAt\n * @prop {datetime} deletedAt\n * @prop {string} email\n * @prop {string} firstName\n * @prop {string} id\n * @prop {string} lastName\n * @prop {string} timeZone\n */\nclass User {}\n\nmodule.exports = User\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources/User.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "typedef",
    "name": "User",
    "memberof": "lib/recurly/resources/User.js",
    "static": true,
    "longname": "lib/recurly/resources/User.js~User",
    "access": "public",
    "description": "User",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{datetime} createdAt"
      },
      {
        "tagName": "@prop",
        "tagValue": "{datetime} deletedAt"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} email"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} firstName"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} id"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} lastName"
      },
      {
        "tagName": "@prop",
        "tagValue": "{string} timeZone"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "User"
    }
  },
  {
    "__docId__": 250,
    "kind": "file",
    "name": "lib/recurly/resources.js",
    "content": "'use strict'\n\nlet fs = require('fs')\n\nlet path = require('path')\n\nlet resourcesPath = path.join(__dirname, 'resources')\nmodule.exports = fs.readdirSync(resourcesPath).reduce((acc, file) => {\n  let className = file.split('/').reverse()[0].split('.')[0]\n  acc[className] = require(`./resources/${file}`)\n  return acc\n}, {})\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly/resources.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "variable",
    "name": "fs",
    "memberof": "lib/recurly/resources.js",
    "static": true,
    "longname": "lib/recurly/resources.js~fs",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/resources.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 252,
    "kind": "variable",
    "name": "path",
    "memberof": "lib/recurly/resources.js",
    "static": true,
    "longname": "lib/recurly/resources.js~path",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/resources.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 253,
    "kind": "variable",
    "name": "resourcesPath",
    "memberof": "lib/recurly/resources.js",
    "static": true,
    "longname": "lib/recurly/resources.js~resourcesPath",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node/lib/recurly/resources.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "lib/recurly.js",
    "content": "'use strict'\n\nlet resources = require('./recurly/resources')\nmodule.exports = Object.assign(resources, {\n  'Client': require('./recurly/Client')\n})\n",
    "static": true,
    "longname": "/Users/ben/code/recurly/v3/clients/node/lib/recurly.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "name": "resources",
    "memberof": "lib/recurly.js",
    "static": true,
    "longname": "lib/recurly.js~resources",
    "access": "public",
    "export": false,
    "importPath": "recurly-client-node",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# Recurly\n\n*Warning: If you find this repo and want to use it, please slack DM Ben first. It's still under development.*\n\nThis library is the node client to the v3, aka API next, aka PAPI, version of Recurly's API. Parts of this gem are generated\nby the `recurly-client-gen` project.\n\n## Example\n\n```js\nconst recurly = require('./lib/recurly');\nconst client = new recurly.Client(apiKey, `subdomain-${mySubdomain}`);\n\nclient.getAccount('code-benjamin')\n  .then(account => console.log(account.id))\n  .catch(console.log);\n\nclient.createAccount({code: 'new-account-code'})\n  .then(account => console.log(account.id))\n  .catch(console.log);\n```\n",
    "longname": "/Users/ben/code/recurly/v3/clients/node/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"recurly-client-node\",\n  \"version\": \"3.0.0-alpha.1\",\n  \"description\": \"Recurly V3 node client\",\n  \"main\": \"lib/recurly.js\",\n  \"scripts\": {\n    \"test\": \"./node_modules/.bin/standard && echo \\\"TODO: lint passed but no test specified yet\\\"\"\n  },\n  \"author\": \"Benjamin Eckel <ben@recurly.com>\",\n  \"license\": \"MIT\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"jsdoc\": \"^3.5.5\",\n    \"standard\": \"^12.0.1\"\n  }\n}\n",
    "longname": "/Users/ben/code/recurly/v3/clients/node/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]